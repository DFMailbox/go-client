/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SendItemsErrorOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendItemsErrorOneOf{}

// SendItemsErrorOneOf struct for SendItemsErrorOneOf
type SendItemsErrorOneOf struct {
	Error interface{} `json:"error,omitempty"`
	// A base64 URL encoded ed25519 public key
	ExpectedKey *string `json:"expected_key,omitempty"`
}

// NewSendItemsErrorOneOf instantiates a new SendItemsErrorOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendItemsErrorOneOf() *SendItemsErrorOneOf {
	this := SendItemsErrorOneOf{}
	return &this
}

// NewSendItemsErrorOneOfWithDefaults instantiates a new SendItemsErrorOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendItemsErrorOneOfWithDefaults() *SendItemsErrorOneOf {
	this := SendItemsErrorOneOf{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SendItemsErrorOneOf) GetError() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendItemsErrorOneOf) GetErrorOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return &o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SendItemsErrorOneOf) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given interface{} and assigns it to the Error field.
func (o *SendItemsErrorOneOf) SetError(v interface{}) {
	o.Error = v
}

// GetExpectedKey returns the ExpectedKey field value if set, zero value otherwise.
func (o *SendItemsErrorOneOf) GetExpectedKey() string {
	if o == nil || IsNil(o.ExpectedKey) {
		var ret string
		return ret
	}
	return *o.ExpectedKey
}

// GetExpectedKeyOk returns a tuple with the ExpectedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendItemsErrorOneOf) GetExpectedKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedKey) {
		return nil, false
	}
	return o.ExpectedKey, true
}

// HasExpectedKey returns a boolean if a field has been set.
func (o *SendItemsErrorOneOf) HasExpectedKey() bool {
	if o != nil && !IsNil(o.ExpectedKey) {
		return true
	}

	return false
}

// SetExpectedKey gets a reference to the given string and assigns it to the ExpectedKey field.
func (o *SendItemsErrorOneOf) SetExpectedKey(v string) {
	o.ExpectedKey = &v
}

func (o SendItemsErrorOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendItemsErrorOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ExpectedKey) {
		toSerialize["expected_key"] = o.ExpectedKey
	}
	return toSerialize, nil
}

type NullableSendItemsErrorOneOf struct {
	value *SendItemsErrorOneOf
	isSet bool
}

func (v NullableSendItemsErrorOneOf) Get() *SendItemsErrorOneOf {
	return v.value
}

func (v *NullableSendItemsErrorOneOf) Set(val *SendItemsErrorOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSendItemsErrorOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSendItemsErrorOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendItemsErrorOneOf(val *SendItemsErrorOneOf) *NullableSendItemsErrorOneOf {
	return &NullableSendItemsErrorOneOf{value: val, isSet: true}
}

func (v NullableSendItemsErrorOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendItemsErrorOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


