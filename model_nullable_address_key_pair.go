/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NullableAddressKeyPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NullableAddressKeyPair{}

// NullableAddressKeyPair Addess and key
type NullableAddressKeyPair struct {
	// An nullable address pointing to another DFMailbox instance. Null, in this case meaning the instance is compromised.
	Address NullableString `json:"address"`
	// A base64 URL encoded ed25519 public key
	PublicKey string `json:"public_key"`
}

type _NullableAddressKeyPair NullableAddressKeyPair

// NewNullableAddressKeyPair instantiates a new NullableAddressKeyPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullableAddressKeyPair(address NullableString, publicKey string) *NullableAddressKeyPair {
	this := NullableAddressKeyPair{}
	this.Address = address
	this.PublicKey = publicKey
	return &this
}

// NewNullableAddressKeyPairWithDefaults instantiates a new NullableAddressKeyPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullableAddressKeyPairWithDefaults() *NullableAddressKeyPair {
	this := NullableAddressKeyPair{}
	return &this
}

// GetAddress returns the Address field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NullableAddressKeyPair) GetAddress() string {
	if o == nil || o.Address.Get() == nil {
		var ret string
		return ret
	}

	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableAddressKeyPair) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// SetAddress sets field value
func (o *NullableAddressKeyPair) SetAddress(v string) {
	o.Address.Set(&v)
}

// GetPublicKey returns the PublicKey field value
func (o *NullableAddressKeyPair) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *NullableAddressKeyPair) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *NullableAddressKeyPair) SetPublicKey(v string) {
	o.PublicKey = v
}

func (o NullableAddressKeyPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NullableAddressKeyPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address.Get()
	toSerialize["public_key"] = o.PublicKey
	return toSerialize, nil
}

func (o *NullableAddressKeyPair) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"public_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNullableAddressKeyPair := _NullableAddressKeyPair{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNullableAddressKeyPair)

	if err != nil {
		return err
	}

	*o = NullableAddressKeyPair(varNullableAddressKeyPair)

	return err
}

type NullableNullableAddressKeyPair struct {
	value *NullableAddressKeyPair
	isSet bool
}

func (v NullableNullableAddressKeyPair) Get() *NullableAddressKeyPair {
	return v.value
}

func (v *NullableNullableAddressKeyPair) Set(val *NullableAddressKeyPair) {
	v.value = val
	v.isSet = true
}

func (v NullableNullableAddressKeyPair) IsSet() bool {
	return v.isSet
}

func (v *NullableNullableAddressKeyPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullableAddressKeyPair(val *NullableAddressKeyPair) *NullableNullableAddressKeyPair {
	return &NullableNullableAddressKeyPair{value: val, isSet: true}
}

func (v NullableNullableAddressKeyPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullableAddressKeyPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


