/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IntroduceInstance409Response - struct for IntroduceInstance409Response
type IntroduceInstance409Response struct {
	AlreadyExistsError *AlreadyExistsError
	NoEffectUpdateError *NoEffectUpdateError
}

// AlreadyExistsErrorAsIntroduceInstance409Response is a convenience function that returns AlreadyExistsError wrapped in IntroduceInstance409Response
func AlreadyExistsErrorAsIntroduceInstance409Response(v *AlreadyExistsError) IntroduceInstance409Response {
	return IntroduceInstance409Response{
		AlreadyExistsError: v,
	}
}

// NoEffectUpdateErrorAsIntroduceInstance409Response is a convenience function that returns NoEffectUpdateError wrapped in IntroduceInstance409Response
func NoEffectUpdateErrorAsIntroduceInstance409Response(v *NoEffectUpdateError) IntroduceInstance409Response {
	return IntroduceInstance409Response{
		NoEffectUpdateError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntroduceInstance409Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AlreadyExistsError
	err = newStrictDecoder(data).Decode(&dst.AlreadyExistsError)
	if err == nil {
		jsonAlreadyExistsError, _ := json.Marshal(dst.AlreadyExistsError)
		if string(jsonAlreadyExistsError) == "{}" { // empty struct
			dst.AlreadyExistsError = nil
		} else {
			if err = validator.Validate(dst.AlreadyExistsError); err != nil {
				dst.AlreadyExistsError = nil
			} else {
				match++
			}
		}
	} else {
		dst.AlreadyExistsError = nil
	}

	// try to unmarshal data into NoEffectUpdateError
	err = newStrictDecoder(data).Decode(&dst.NoEffectUpdateError)
	if err == nil {
		jsonNoEffectUpdateError, _ := json.Marshal(dst.NoEffectUpdateError)
		if string(jsonNoEffectUpdateError) == "{}" { // empty struct
			dst.NoEffectUpdateError = nil
		} else {
			if err = validator.Validate(dst.NoEffectUpdateError); err != nil {
				dst.NoEffectUpdateError = nil
			} else {
				match++
			}
		}
	} else {
		dst.NoEffectUpdateError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AlreadyExistsError = nil
		dst.NoEffectUpdateError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntroduceInstance409Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntroduceInstance409Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntroduceInstance409Response) MarshalJSON() ([]byte, error) {
	if src.AlreadyExistsError != nil {
		return json.Marshal(&src.AlreadyExistsError)
	}

	if src.NoEffectUpdateError != nil {
		return json.Marshal(&src.NoEffectUpdateError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntroduceInstance409Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AlreadyExistsError != nil {
		return obj.AlreadyExistsError
	}

	if obj.NoEffectUpdateError != nil {
		return obj.NoEffectUpdateError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IntroduceInstance409Response) GetActualInstanceValue() (interface{}) {
	if obj.AlreadyExistsError != nil {
		return *obj.AlreadyExistsError
	}

	if obj.NoEffectUpdateError != nil {
		return *obj.NoEffectUpdateError
	}

	// all schemas are nil
	return nil
}

type NullableIntroduceInstance409Response struct {
	value *IntroduceInstance409Response
	isSet bool
}

func (v NullableIntroduceInstance409Response) Get() *IntroduceInstance409Response {
	return v.value
}

func (v *NullableIntroduceInstance409Response) Set(val *IntroduceInstance409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableIntroduceInstance409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableIntroduceInstance409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntroduceInstance409Response(val *IntroduceInstance409Response) *NullableIntroduceInstance409Response {
	return &NullableIntroduceInstance409Response{value: val, isSet: true}
}

func (v NullableIntroduceInstance409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntroduceInstance409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


