/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CrossInstanceSendError - An error emitted when a cross instance send fails. All of these errors are emitted in the perspective of this instance.
type CrossInstanceSendError struct {
	CrossInstanceSendErrorOneOf *CrossInstanceSendErrorOneOf
	CrossInstanceSendErrorOneOf1 *CrossInstanceSendErrorOneOf1
	CrossInstanceSendErrorOneOf2 *CrossInstanceSendErrorOneOf2
	CrossInstanceSendErrorOneOf3 *CrossInstanceSendErrorOneOf3
}

// CrossInstanceSendErrorOneOfAsCrossInstanceSendError is a convenience function that returns CrossInstanceSendErrorOneOf wrapped in CrossInstanceSendError
func CrossInstanceSendErrorOneOfAsCrossInstanceSendError(v *CrossInstanceSendErrorOneOf) CrossInstanceSendError {
	return CrossInstanceSendError{
		CrossInstanceSendErrorOneOf: v,
	}
}

// CrossInstanceSendErrorOneOf1AsCrossInstanceSendError is a convenience function that returns CrossInstanceSendErrorOneOf1 wrapped in CrossInstanceSendError
func CrossInstanceSendErrorOneOf1AsCrossInstanceSendError(v *CrossInstanceSendErrorOneOf1) CrossInstanceSendError {
	return CrossInstanceSendError{
		CrossInstanceSendErrorOneOf1: v,
	}
}

// CrossInstanceSendErrorOneOf2AsCrossInstanceSendError is a convenience function that returns CrossInstanceSendErrorOneOf2 wrapped in CrossInstanceSendError
func CrossInstanceSendErrorOneOf2AsCrossInstanceSendError(v *CrossInstanceSendErrorOneOf2) CrossInstanceSendError {
	return CrossInstanceSendError{
		CrossInstanceSendErrorOneOf2: v,
	}
}

// CrossInstanceSendErrorOneOf3AsCrossInstanceSendError is a convenience function that returns CrossInstanceSendErrorOneOf3 wrapped in CrossInstanceSendError
func CrossInstanceSendErrorOneOf3AsCrossInstanceSendError(v *CrossInstanceSendErrorOneOf3) CrossInstanceSendError {
	return CrossInstanceSendError{
		CrossInstanceSendErrorOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CrossInstanceSendError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CrossInstanceSendErrorOneOf
	err = newStrictDecoder(data).Decode(&dst.CrossInstanceSendErrorOneOf)
	if err == nil {
		jsonCrossInstanceSendErrorOneOf, _ := json.Marshal(dst.CrossInstanceSendErrorOneOf)
		if string(jsonCrossInstanceSendErrorOneOf) == "{}" { // empty struct
			dst.CrossInstanceSendErrorOneOf = nil
		} else {
			if err = validator.Validate(dst.CrossInstanceSendErrorOneOf); err != nil {
				dst.CrossInstanceSendErrorOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.CrossInstanceSendErrorOneOf = nil
	}

	// try to unmarshal data into CrossInstanceSendErrorOneOf1
	err = newStrictDecoder(data).Decode(&dst.CrossInstanceSendErrorOneOf1)
	if err == nil {
		jsonCrossInstanceSendErrorOneOf1, _ := json.Marshal(dst.CrossInstanceSendErrorOneOf1)
		if string(jsonCrossInstanceSendErrorOneOf1) == "{}" { // empty struct
			dst.CrossInstanceSendErrorOneOf1 = nil
		} else {
			if err = validator.Validate(dst.CrossInstanceSendErrorOneOf1); err != nil {
				dst.CrossInstanceSendErrorOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CrossInstanceSendErrorOneOf1 = nil
	}

	// try to unmarshal data into CrossInstanceSendErrorOneOf2
	err = newStrictDecoder(data).Decode(&dst.CrossInstanceSendErrorOneOf2)
	if err == nil {
		jsonCrossInstanceSendErrorOneOf2, _ := json.Marshal(dst.CrossInstanceSendErrorOneOf2)
		if string(jsonCrossInstanceSendErrorOneOf2) == "{}" { // empty struct
			dst.CrossInstanceSendErrorOneOf2 = nil
		} else {
			if err = validator.Validate(dst.CrossInstanceSendErrorOneOf2); err != nil {
				dst.CrossInstanceSendErrorOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CrossInstanceSendErrorOneOf2 = nil
	}

	// try to unmarshal data into CrossInstanceSendErrorOneOf3
	err = newStrictDecoder(data).Decode(&dst.CrossInstanceSendErrorOneOf3)
	if err == nil {
		jsonCrossInstanceSendErrorOneOf3, _ := json.Marshal(dst.CrossInstanceSendErrorOneOf3)
		if string(jsonCrossInstanceSendErrorOneOf3) == "{}" { // empty struct
			dst.CrossInstanceSendErrorOneOf3 = nil
		} else {
			if err = validator.Validate(dst.CrossInstanceSendErrorOneOf3); err != nil {
				dst.CrossInstanceSendErrorOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CrossInstanceSendErrorOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CrossInstanceSendErrorOneOf = nil
		dst.CrossInstanceSendErrorOneOf1 = nil
		dst.CrossInstanceSendErrorOneOf2 = nil
		dst.CrossInstanceSendErrorOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CrossInstanceSendError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CrossInstanceSendError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CrossInstanceSendError) MarshalJSON() ([]byte, error) {
	if src.CrossInstanceSendErrorOneOf != nil {
		return json.Marshal(&src.CrossInstanceSendErrorOneOf)
	}

	if src.CrossInstanceSendErrorOneOf1 != nil {
		return json.Marshal(&src.CrossInstanceSendErrorOneOf1)
	}

	if src.CrossInstanceSendErrorOneOf2 != nil {
		return json.Marshal(&src.CrossInstanceSendErrorOneOf2)
	}

	if src.CrossInstanceSendErrorOneOf3 != nil {
		return json.Marshal(&src.CrossInstanceSendErrorOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CrossInstanceSendError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CrossInstanceSendErrorOneOf != nil {
		return obj.CrossInstanceSendErrorOneOf
	}

	if obj.CrossInstanceSendErrorOneOf1 != nil {
		return obj.CrossInstanceSendErrorOneOf1
	}

	if obj.CrossInstanceSendErrorOneOf2 != nil {
		return obj.CrossInstanceSendErrorOneOf2
	}

	if obj.CrossInstanceSendErrorOneOf3 != nil {
		return obj.CrossInstanceSendErrorOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CrossInstanceSendError) GetActualInstanceValue() (interface{}) {
	if obj.CrossInstanceSendErrorOneOf != nil {
		return *obj.CrossInstanceSendErrorOneOf
	}

	if obj.CrossInstanceSendErrorOneOf1 != nil {
		return *obj.CrossInstanceSendErrorOneOf1
	}

	if obj.CrossInstanceSendErrorOneOf2 != nil {
		return *obj.CrossInstanceSendErrorOneOf2
	}

	if obj.CrossInstanceSendErrorOneOf3 != nil {
		return *obj.CrossInstanceSendErrorOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableCrossInstanceSendError struct {
	value *CrossInstanceSendError
	isSet bool
}

func (v NullableCrossInstanceSendError) Get() *CrossInstanceSendError {
	return v.value
}

func (v *NullableCrossInstanceSendError) Set(val *CrossInstanceSendError) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossInstanceSendError) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossInstanceSendError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossInstanceSendError(val *CrossInstanceSendError) *NullableCrossInstanceSendError {
	return &NullableCrossInstanceSendError{value: val, isSet: true}
}

func (v NullableCrossInstanceSendError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossInstanceSendError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


