/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IntroduceInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntroduceInstanceRequest{}

// IntroduceInstanceRequest struct for IntroduceInstanceRequest
type IntroduceInstanceRequest struct {
	// A base64 URL encoded ed25519 public key
	PublicKey string `json:"public_key"`
	// An address pointing to another DFMailbox instance
	Address string `json:"address"`
	// Whether to update the key or not
	Update *bool `json:"update,omitempty"`
}

type _IntroduceInstanceRequest IntroduceInstanceRequest

// NewIntroduceInstanceRequest instantiates a new IntroduceInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntroduceInstanceRequest(publicKey string, address string) *IntroduceInstanceRequest {
	this := IntroduceInstanceRequest{}
	this.PublicKey = publicKey
	this.Address = address
	return &this
}

// NewIntroduceInstanceRequestWithDefaults instantiates a new IntroduceInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntroduceInstanceRequestWithDefaults() *IntroduceInstanceRequest {
	this := IntroduceInstanceRequest{}
	return &this
}

// GetPublicKey returns the PublicKey field value
func (o *IntroduceInstanceRequest) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *IntroduceInstanceRequest) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *IntroduceInstanceRequest) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetAddress returns the Address field value
func (o *IntroduceInstanceRequest) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *IntroduceInstanceRequest) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *IntroduceInstanceRequest) SetAddress(v string) {
	o.Address = v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *IntroduceInstanceRequest) GetUpdate() bool {
	if o == nil || IsNil(o.Update) {
		var ret bool
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntroduceInstanceRequest) GetUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *IntroduceInstanceRequest) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given bool and assigns it to the Update field.
func (o *IntroduceInstanceRequest) SetUpdate(v bool) {
	o.Update = &v
}

func (o IntroduceInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntroduceInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["public_key"] = o.PublicKey
	toSerialize["address"] = o.Address
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

func (o *IntroduceInstanceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"public_key",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntroduceInstanceRequest := _IntroduceInstanceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntroduceInstanceRequest)

	if err != nil {
		return err
	}

	*o = IntroduceInstanceRequest(varIntroduceInstanceRequest)

	return err
}

type NullableIntroduceInstanceRequest struct {
	value *IntroduceInstanceRequest
	isSet bool
}

func (v NullableIntroduceInstanceRequest) Get() *IntroduceInstanceRequest {
	return v.value
}

func (v *NullableIntroduceInstanceRequest) Set(val *IntroduceInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIntroduceInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIntroduceInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntroduceInstanceRequest(val *IntroduceInstanceRequest) *NullableIntroduceInstanceRequest {
	return &NullableIntroduceInstanceRequest{value: val, isSet: true}
}

func (v NullableIntroduceInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntroduceInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


