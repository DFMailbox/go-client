/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SendItemsError - An error emitted when a send inside an instance occurs
type SendItemsError struct {
	UnregisteredPlotError *UnregisteredPlotError
	UntrustedPlotError *UntrustedPlotError
}

// UnregisteredPlotErrorAsSendItemsError is a convenience function that returns UnregisteredPlotError wrapped in SendItemsError
func UnregisteredPlotErrorAsSendItemsError(v *UnregisteredPlotError) SendItemsError {
	return SendItemsError{
		UnregisteredPlotError: v,
	}
}

// UntrustedPlotErrorAsSendItemsError is a convenience function that returns UntrustedPlotError wrapped in SendItemsError
func UntrustedPlotErrorAsSendItemsError(v *UntrustedPlotError) SendItemsError {
	return SendItemsError{
		UntrustedPlotError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SendItemsError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UnregisteredPlotError
	err = newStrictDecoder(data).Decode(&dst.UnregisteredPlotError)
	if err == nil {
		jsonUnregisteredPlotError, _ := json.Marshal(dst.UnregisteredPlotError)
		if string(jsonUnregisteredPlotError) == "{}" { // empty struct
			dst.UnregisteredPlotError = nil
		} else {
			if err = validator.Validate(dst.UnregisteredPlotError); err != nil {
				dst.UnregisteredPlotError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnregisteredPlotError = nil
	}

	// try to unmarshal data into UntrustedPlotError
	err = newStrictDecoder(data).Decode(&dst.UntrustedPlotError)
	if err == nil {
		jsonUntrustedPlotError, _ := json.Marshal(dst.UntrustedPlotError)
		if string(jsonUntrustedPlotError) == "{}" { // empty struct
			dst.UntrustedPlotError = nil
		} else {
			if err = validator.Validate(dst.UntrustedPlotError); err != nil {
				dst.UntrustedPlotError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UntrustedPlotError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UnregisteredPlotError = nil
		dst.UntrustedPlotError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SendItemsError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SendItemsError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SendItemsError) MarshalJSON() ([]byte, error) {
	if src.UnregisteredPlotError != nil {
		return json.Marshal(&src.UnregisteredPlotError)
	}

	if src.UntrustedPlotError != nil {
		return json.Marshal(&src.UntrustedPlotError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SendItemsError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UnregisteredPlotError != nil {
		return obj.UnregisteredPlotError
	}

	if obj.UntrustedPlotError != nil {
		return obj.UntrustedPlotError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SendItemsError) GetActualInstanceValue() (interface{}) {
	if obj.UnregisteredPlotError != nil {
		return *obj.UnregisteredPlotError
	}

	if obj.UntrustedPlotError != nil {
		return *obj.UntrustedPlotError
	}

	// all schemas are nil
	return nil
}

type NullableSendItemsError struct {
	value *SendItemsError
	isSet bool
}

func (v NullableSendItemsError) Get() *SendItemsError {
	return v.value
}

func (v *NullableSendItemsError) Set(val *SendItemsError) {
	v.value = val
	v.isSet = true
}

func (v NullableSendItemsError) IsSet() bool {
	return v.isSet
}

func (v *NullableSendItemsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendItemsError(val *SendItemsError) *NullableSendItemsError {
	return &NullableSendItemsError{value: val, isSet: true}
}

func (v NullableSendItemsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendItemsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


