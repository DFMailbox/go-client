/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SendItemsError - An error emitted when a cross instance send fails. All of these errors are emitted in the perspective of this instance.
type SendItemsError struct {
	ChallengeFailedError *ChallengeFailedError
	InstanceKeyCompromisedError *InstanceKeyCompromisedError
	SendItemsErrorOneOf *SendItemsErrorOneOf
	SendItemsErrorOneOf1 *SendItemsErrorOneOf1
	SendItemsErrorOneOf2 *SendItemsErrorOneOf2
	SendItemsErrorOneOf3 *SendItemsErrorOneOf3
}

// ChallengeFailedErrorAsSendItemsError is a convenience function that returns ChallengeFailedError wrapped in SendItemsError
func ChallengeFailedErrorAsSendItemsError(v *ChallengeFailedError) SendItemsError {
	return SendItemsError{
		ChallengeFailedError: v,
	}
}

// InstanceKeyCompromisedErrorAsSendItemsError is a convenience function that returns InstanceKeyCompromisedError wrapped in SendItemsError
func InstanceKeyCompromisedErrorAsSendItemsError(v *InstanceKeyCompromisedError) SendItemsError {
	return SendItemsError{
		InstanceKeyCompromisedError: v,
	}
}

// SendItemsErrorOneOfAsSendItemsError is a convenience function that returns SendItemsErrorOneOf wrapped in SendItemsError
func SendItemsErrorOneOfAsSendItemsError(v *SendItemsErrorOneOf) SendItemsError {
	return SendItemsError{
		SendItemsErrorOneOf: v,
	}
}

// SendItemsErrorOneOf1AsSendItemsError is a convenience function that returns SendItemsErrorOneOf1 wrapped in SendItemsError
func SendItemsErrorOneOf1AsSendItemsError(v *SendItemsErrorOneOf1) SendItemsError {
	return SendItemsError{
		SendItemsErrorOneOf1: v,
	}
}

// SendItemsErrorOneOf2AsSendItemsError is a convenience function that returns SendItemsErrorOneOf2 wrapped in SendItemsError
func SendItemsErrorOneOf2AsSendItemsError(v *SendItemsErrorOneOf2) SendItemsError {
	return SendItemsError{
		SendItemsErrorOneOf2: v,
	}
}

// SendItemsErrorOneOf3AsSendItemsError is a convenience function that returns SendItemsErrorOneOf3 wrapped in SendItemsError
func SendItemsErrorOneOf3AsSendItemsError(v *SendItemsErrorOneOf3) SendItemsError {
	return SendItemsError{
		SendItemsErrorOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SendItemsError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChallengeFailedError
	err = newStrictDecoder(data).Decode(&dst.ChallengeFailedError)
	if err == nil {
		jsonChallengeFailedError, _ := json.Marshal(dst.ChallengeFailedError)
		if string(jsonChallengeFailedError) == "{}" { // empty struct
			dst.ChallengeFailedError = nil
		} else {
			if err = validator.Validate(dst.ChallengeFailedError); err != nil {
				dst.ChallengeFailedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChallengeFailedError = nil
	}

	// try to unmarshal data into InstanceKeyCompromisedError
	err = newStrictDecoder(data).Decode(&dst.InstanceKeyCompromisedError)
	if err == nil {
		jsonInstanceKeyCompromisedError, _ := json.Marshal(dst.InstanceKeyCompromisedError)
		if string(jsonInstanceKeyCompromisedError) == "{}" { // empty struct
			dst.InstanceKeyCompromisedError = nil
		} else {
			if err = validator.Validate(dst.InstanceKeyCompromisedError); err != nil {
				dst.InstanceKeyCompromisedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InstanceKeyCompromisedError = nil
	}

	// try to unmarshal data into SendItemsErrorOneOf
	err = newStrictDecoder(data).Decode(&dst.SendItemsErrorOneOf)
	if err == nil {
		jsonSendItemsErrorOneOf, _ := json.Marshal(dst.SendItemsErrorOneOf)
		if string(jsonSendItemsErrorOneOf) == "{}" { // empty struct
			dst.SendItemsErrorOneOf = nil
		} else {
			if err = validator.Validate(dst.SendItemsErrorOneOf); err != nil {
				dst.SendItemsErrorOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SendItemsErrorOneOf = nil
	}

	// try to unmarshal data into SendItemsErrorOneOf1
	err = newStrictDecoder(data).Decode(&dst.SendItemsErrorOneOf1)
	if err == nil {
		jsonSendItemsErrorOneOf1, _ := json.Marshal(dst.SendItemsErrorOneOf1)
		if string(jsonSendItemsErrorOneOf1) == "{}" { // empty struct
			dst.SendItemsErrorOneOf1 = nil
		} else {
			if err = validator.Validate(dst.SendItemsErrorOneOf1); err != nil {
				dst.SendItemsErrorOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SendItemsErrorOneOf1 = nil
	}

	// try to unmarshal data into SendItemsErrorOneOf2
	err = newStrictDecoder(data).Decode(&dst.SendItemsErrorOneOf2)
	if err == nil {
		jsonSendItemsErrorOneOf2, _ := json.Marshal(dst.SendItemsErrorOneOf2)
		if string(jsonSendItemsErrorOneOf2) == "{}" { // empty struct
			dst.SendItemsErrorOneOf2 = nil
		} else {
			if err = validator.Validate(dst.SendItemsErrorOneOf2); err != nil {
				dst.SendItemsErrorOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SendItemsErrorOneOf2 = nil
	}

	// try to unmarshal data into SendItemsErrorOneOf3
	err = newStrictDecoder(data).Decode(&dst.SendItemsErrorOneOf3)
	if err == nil {
		jsonSendItemsErrorOneOf3, _ := json.Marshal(dst.SendItemsErrorOneOf3)
		if string(jsonSendItemsErrorOneOf3) == "{}" { // empty struct
			dst.SendItemsErrorOneOf3 = nil
		} else {
			if err = validator.Validate(dst.SendItemsErrorOneOf3); err != nil {
				dst.SendItemsErrorOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SendItemsErrorOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChallengeFailedError = nil
		dst.InstanceKeyCompromisedError = nil
		dst.SendItemsErrorOneOf = nil
		dst.SendItemsErrorOneOf1 = nil
		dst.SendItemsErrorOneOf2 = nil
		dst.SendItemsErrorOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SendItemsError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SendItemsError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SendItemsError) MarshalJSON() ([]byte, error) {
	if src.ChallengeFailedError != nil {
		return json.Marshal(&src.ChallengeFailedError)
	}

	if src.InstanceKeyCompromisedError != nil {
		return json.Marshal(&src.InstanceKeyCompromisedError)
	}

	if src.SendItemsErrorOneOf != nil {
		return json.Marshal(&src.SendItemsErrorOneOf)
	}

	if src.SendItemsErrorOneOf1 != nil {
		return json.Marshal(&src.SendItemsErrorOneOf1)
	}

	if src.SendItemsErrorOneOf2 != nil {
		return json.Marshal(&src.SendItemsErrorOneOf2)
	}

	if src.SendItemsErrorOneOf3 != nil {
		return json.Marshal(&src.SendItemsErrorOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SendItemsError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChallengeFailedError != nil {
		return obj.ChallengeFailedError
	}

	if obj.InstanceKeyCompromisedError != nil {
		return obj.InstanceKeyCompromisedError
	}

	if obj.SendItemsErrorOneOf != nil {
		return obj.SendItemsErrorOneOf
	}

	if obj.SendItemsErrorOneOf1 != nil {
		return obj.SendItemsErrorOneOf1
	}

	if obj.SendItemsErrorOneOf2 != nil {
		return obj.SendItemsErrorOneOf2
	}

	if obj.SendItemsErrorOneOf3 != nil {
		return obj.SendItemsErrorOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SendItemsError) GetActualInstanceValue() (interface{}) {
	if obj.ChallengeFailedError != nil {
		return *obj.ChallengeFailedError
	}

	if obj.InstanceKeyCompromisedError != nil {
		return *obj.InstanceKeyCompromisedError
	}

	if obj.SendItemsErrorOneOf != nil {
		return *obj.SendItemsErrorOneOf
	}

	if obj.SendItemsErrorOneOf1 != nil {
		return *obj.SendItemsErrorOneOf1
	}

	if obj.SendItemsErrorOneOf2 != nil {
		return *obj.SendItemsErrorOneOf2
	}

	if obj.SendItemsErrorOneOf3 != nil {
		return *obj.SendItemsErrorOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableSendItemsError struct {
	value *SendItemsError
	isSet bool
}

func (v NullableSendItemsError) Get() *SendItemsError {
	return v.value
}

func (v *NullableSendItemsError) Set(val *SendItemsError) {
	v.value = val
	v.isSet = true
}

func (v NullableSendItemsError) IsSet() bool {
	return v.isSet
}

func (v *NullableSendItemsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendItemsError(val *SendItemsError) *NullableSendItemsError {
	return &NullableSendItemsError{value: val, isSet: true}
}

func (v NullableSendItemsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendItemsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


