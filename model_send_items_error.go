/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SendItemsError - An error emitted when a send inside an instance occurs
type SendItemsError struct {
	MarkKeyAsCompromised400ResponseOneOf *MarkKeyAsCompromised400ResponseOneOf
	SendItemsErrorOneOf *SendItemsErrorOneOf
}

// MarkKeyAsCompromised400ResponseOneOfAsSendItemsError is a convenience function that returns MarkKeyAsCompromised400ResponseOneOf wrapped in SendItemsError
func MarkKeyAsCompromised400ResponseOneOfAsSendItemsError(v *MarkKeyAsCompromised400ResponseOneOf) SendItemsError {
	return SendItemsError{
		MarkKeyAsCompromised400ResponseOneOf: v,
	}
}

// SendItemsErrorOneOfAsSendItemsError is a convenience function that returns SendItemsErrorOneOf wrapped in SendItemsError
func SendItemsErrorOneOfAsSendItemsError(v *SendItemsErrorOneOf) SendItemsError {
	return SendItemsError{
		SendItemsErrorOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SendItemsError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MarkKeyAsCompromised400ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.MarkKeyAsCompromised400ResponseOneOf)
	if err == nil {
		jsonMarkKeyAsCompromised400ResponseOneOf, _ := json.Marshal(dst.MarkKeyAsCompromised400ResponseOneOf)
		if string(jsonMarkKeyAsCompromised400ResponseOneOf) == "{}" { // empty struct
			dst.MarkKeyAsCompromised400ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.MarkKeyAsCompromised400ResponseOneOf); err != nil {
				dst.MarkKeyAsCompromised400ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MarkKeyAsCompromised400ResponseOneOf = nil
	}

	// try to unmarshal data into SendItemsErrorOneOf
	err = newStrictDecoder(data).Decode(&dst.SendItemsErrorOneOf)
	if err == nil {
		jsonSendItemsErrorOneOf, _ := json.Marshal(dst.SendItemsErrorOneOf)
		if string(jsonSendItemsErrorOneOf) == "{}" { // empty struct
			dst.SendItemsErrorOneOf = nil
		} else {
			if err = validator.Validate(dst.SendItemsErrorOneOf); err != nil {
				dst.SendItemsErrorOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SendItemsErrorOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MarkKeyAsCompromised400ResponseOneOf = nil
		dst.SendItemsErrorOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SendItemsError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SendItemsError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SendItemsError) MarshalJSON() ([]byte, error) {
	if src.MarkKeyAsCompromised400ResponseOneOf != nil {
		return json.Marshal(&src.MarkKeyAsCompromised400ResponseOneOf)
	}

	if src.SendItemsErrorOneOf != nil {
		return json.Marshal(&src.SendItemsErrorOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SendItemsError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MarkKeyAsCompromised400ResponseOneOf != nil {
		return obj.MarkKeyAsCompromised400ResponseOneOf
	}

	if obj.SendItemsErrorOneOf != nil {
		return obj.SendItemsErrorOneOf
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SendItemsError) GetActualInstanceValue() (interface{}) {
	if obj.MarkKeyAsCompromised400ResponseOneOf != nil {
		return *obj.MarkKeyAsCompromised400ResponseOneOf
	}

	if obj.SendItemsErrorOneOf != nil {
		return *obj.SendItemsErrorOneOf
	}

	// all schemas are nil
	return nil
}

type NullableSendItemsError struct {
	value *SendItemsError
	isSet bool
}

func (v NullableSendItemsError) Get() *SendItemsError {
	return v.value
}

func (v *NullableSendItemsError) Set(val *SendItemsError) {
	v.value = val
	v.isSet = true
}

func (v NullableSendItemsError) IsSet() bool {
	return v.isSet
}

func (v *NullableSendItemsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendItemsError(val *SendItemsError) *NullableSendItemsError {
	return &NullableSendItemsError{value: val, isSet: true}
}

func (v NullableSendItemsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendItemsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


