/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RefreshToken400Response - struct for RefreshToken400Response
type RefreshToken400Response struct {
	ChallengeFailedError *ChallengeFailedError
	InvalidChallengeError *InvalidChallengeError
	UnknownInstanceError *UnknownInstanceError
}

// ChallengeFailedErrorAsRefreshToken400Response is a convenience function that returns ChallengeFailedError wrapped in RefreshToken400Response
func ChallengeFailedErrorAsRefreshToken400Response(v *ChallengeFailedError) RefreshToken400Response {
	return RefreshToken400Response{
		ChallengeFailedError: v,
	}
}

// InvalidChallengeErrorAsRefreshToken400Response is a convenience function that returns InvalidChallengeError wrapped in RefreshToken400Response
func InvalidChallengeErrorAsRefreshToken400Response(v *InvalidChallengeError) RefreshToken400Response {
	return RefreshToken400Response{
		InvalidChallengeError: v,
	}
}

// UnknownInstanceErrorAsRefreshToken400Response is a convenience function that returns UnknownInstanceError wrapped in RefreshToken400Response
func UnknownInstanceErrorAsRefreshToken400Response(v *UnknownInstanceError) RefreshToken400Response {
	return RefreshToken400Response{
		UnknownInstanceError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RefreshToken400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChallengeFailedError
	err = newStrictDecoder(data).Decode(&dst.ChallengeFailedError)
	if err == nil {
		jsonChallengeFailedError, _ := json.Marshal(dst.ChallengeFailedError)
		if string(jsonChallengeFailedError) == "{}" { // empty struct
			dst.ChallengeFailedError = nil
		} else {
			if err = validator.Validate(dst.ChallengeFailedError); err != nil {
				dst.ChallengeFailedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChallengeFailedError = nil
	}

	// try to unmarshal data into InvalidChallengeError
	err = newStrictDecoder(data).Decode(&dst.InvalidChallengeError)
	if err == nil {
		jsonInvalidChallengeError, _ := json.Marshal(dst.InvalidChallengeError)
		if string(jsonInvalidChallengeError) == "{}" { // empty struct
			dst.InvalidChallengeError = nil
		} else {
			if err = validator.Validate(dst.InvalidChallengeError); err != nil {
				dst.InvalidChallengeError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvalidChallengeError = nil
	}

	// try to unmarshal data into UnknownInstanceError
	err = newStrictDecoder(data).Decode(&dst.UnknownInstanceError)
	if err == nil {
		jsonUnknownInstanceError, _ := json.Marshal(dst.UnknownInstanceError)
		if string(jsonUnknownInstanceError) == "{}" { // empty struct
			dst.UnknownInstanceError = nil
		} else {
			if err = validator.Validate(dst.UnknownInstanceError); err != nil {
				dst.UnknownInstanceError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnknownInstanceError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChallengeFailedError = nil
		dst.InvalidChallengeError = nil
		dst.UnknownInstanceError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RefreshToken400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RefreshToken400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RefreshToken400Response) MarshalJSON() ([]byte, error) {
	if src.ChallengeFailedError != nil {
		return json.Marshal(&src.ChallengeFailedError)
	}

	if src.InvalidChallengeError != nil {
		return json.Marshal(&src.InvalidChallengeError)
	}

	if src.UnknownInstanceError != nil {
		return json.Marshal(&src.UnknownInstanceError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RefreshToken400Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChallengeFailedError != nil {
		return obj.ChallengeFailedError
	}

	if obj.InvalidChallengeError != nil {
		return obj.InvalidChallengeError
	}

	if obj.UnknownInstanceError != nil {
		return obj.UnknownInstanceError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RefreshToken400Response) GetActualInstanceValue() (interface{}) {
	if obj.ChallengeFailedError != nil {
		return *obj.ChallengeFailedError
	}

	if obj.InvalidChallengeError != nil {
		return *obj.InvalidChallengeError
	}

	if obj.UnknownInstanceError != nil {
		return *obj.UnknownInstanceError
	}

	// all schemas are nil
	return nil
}

type NullableRefreshToken400Response struct {
	value *RefreshToken400Response
	isSet bool
}

func (v NullableRefreshToken400Response) Get() *RefreshToken400Response {
	return v.value
}

func (v *NullableRefreshToken400Response) Set(val *RefreshToken400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshToken400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshToken400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshToken400Response(val *RefreshToken400Response) *NullableRefreshToken400Response {
	return &NullableRefreshToken400Response{value: val, isSet: true}
}

func (v NullableRefreshToken400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshToken400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


