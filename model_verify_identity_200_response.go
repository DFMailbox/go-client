/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VerifyIdentity200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyIdentity200Response{}

// VerifyIdentity200Response struct for VerifyIdentity200Response
type VerifyIdentity200Response struct {
	// A base64 URL encoded ed25519 public key
	PublicKey string `json:"public_key"`
	// A base64 encoded ed25519 signature
	Signature string `json:"signature"`
	// An address pointing to another DFMailbox instance
	Address string `json:"address"`
}

type _VerifyIdentity200Response VerifyIdentity200Response

// NewVerifyIdentity200Response instantiates a new VerifyIdentity200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyIdentity200Response(publicKey string, signature string, address string) *VerifyIdentity200Response {
	this := VerifyIdentity200Response{}
	this.PublicKey = publicKey
	this.Signature = signature
	this.Address = address
	return &this
}

// NewVerifyIdentity200ResponseWithDefaults instantiates a new VerifyIdentity200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyIdentity200ResponseWithDefaults() *VerifyIdentity200Response {
	this := VerifyIdentity200Response{}
	return &this
}

// GetPublicKey returns the PublicKey field value
func (o *VerifyIdentity200Response) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *VerifyIdentity200Response) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *VerifyIdentity200Response) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetSignature returns the Signature field value
func (o *VerifyIdentity200Response) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *VerifyIdentity200Response) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *VerifyIdentity200Response) SetSignature(v string) {
	o.Signature = v
}

// GetAddress returns the Address field value
func (o *VerifyIdentity200Response) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VerifyIdentity200Response) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VerifyIdentity200Response) SetAddress(v string) {
	o.Address = v
}

func (o VerifyIdentity200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyIdentity200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["public_key"] = o.PublicKey
	toSerialize["signature"] = o.Signature
	toSerialize["address"] = o.Address
	return toSerialize, nil
}

func (o *VerifyIdentity200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"public_key",
		"signature",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyIdentity200Response := _VerifyIdentity200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifyIdentity200Response)

	if err != nil {
		return err
	}

	*o = VerifyIdentity200Response(varVerifyIdentity200Response)

	return err
}

type NullableVerifyIdentity200Response struct {
	value *VerifyIdentity200Response
	isSet bool
}

func (v NullableVerifyIdentity200Response) Get() *VerifyIdentity200Response {
	return v.value
}

func (v *NullableVerifyIdentity200Response) Set(val *VerifyIdentity200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyIdentity200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyIdentity200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyIdentity200Response(val *VerifyIdentity200Response) *NullableVerifyIdentity200Response {
	return &NullableVerifyIdentity200Response{value: val, isSet: true}
}

func (v NullableVerifyIdentity200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyIdentity200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


