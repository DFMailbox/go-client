/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstanceKeyCompromised type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceKeyCompromised{}

// InstanceKeyCompromised Instance key has been invalidated therefore being marked as compromised
type InstanceKeyCompromised struct {
	Type interface{} `json:"type"`
	Title interface{} `json:"title"`
	// HTTP status code
	Status int32 `json:"status"`
	Details string `json:"details"`
	// A base64 URL encoded ed25519 public key
	InstanceKey string `json:"instance_key"`
}

type _InstanceKeyCompromised InstanceKeyCompromised

// NewInstanceKeyCompromised instantiates a new InstanceKeyCompromised object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceKeyCompromised(type_ interface{}, title interface{}, status int32, details string, instanceKey string) *InstanceKeyCompromised {
	this := InstanceKeyCompromised{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.Details = details
	this.InstanceKey = instanceKey
	return &this
}

// NewInstanceKeyCompromisedWithDefaults instantiates a new InstanceKeyCompromised object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceKeyCompromisedWithDefaults() *InstanceKeyCompromised {
	this := InstanceKeyCompromised{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InstanceKeyCompromised) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceKeyCompromised) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstanceKeyCompromised) SetType(v interface{}) {
	o.Type = v
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InstanceKeyCompromised) GetTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceKeyCompromised) GetTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InstanceKeyCompromised) SetTitle(v interface{}) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *InstanceKeyCompromised) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InstanceKeyCompromised) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InstanceKeyCompromised) SetStatus(v int32) {
	o.Status = v
}

// GetDetails returns the Details field value
func (o *InstanceKeyCompromised) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *InstanceKeyCompromised) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *InstanceKeyCompromised) SetDetails(v string) {
	o.Details = v
}

// GetInstanceKey returns the InstanceKey field value
func (o *InstanceKeyCompromised) GetInstanceKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value
// and a boolean to check if the value has been set.
func (o *InstanceKeyCompromised) GetInstanceKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceKey, true
}

// SetInstanceKey sets field value
func (o *InstanceKeyCompromised) SetInstanceKey(v string) {
	o.InstanceKey = v
}

func (o InstanceKeyCompromised) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceKeyCompromised) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	toSerialize["status"] = o.Status
	toSerialize["details"] = o.Details
	toSerialize["instance_key"] = o.InstanceKey
	return toSerialize, nil
}

func (o *InstanceKeyCompromised) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"status",
		"details",
		"instance_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceKeyCompromised := _InstanceKeyCompromised{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstanceKeyCompromised)

	if err != nil {
		return err
	}

	*o = InstanceKeyCompromised(varInstanceKeyCompromised)

	return err
}

type NullableInstanceKeyCompromised struct {
	value *InstanceKeyCompromised
	isSet bool
}

func (v NullableInstanceKeyCompromised) Get() *InstanceKeyCompromised {
	return v.value
}

func (v *NullableInstanceKeyCompromised) Set(val *InstanceKeyCompromised) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceKeyCompromised) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceKeyCompromised) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceKeyCompromised(val *InstanceKeyCompromised) *NullableInstanceKeyCompromised {
	return &NullableInstanceKeyCompromised{value: val, isSet: true}
}

func (v NullableInstanceKeyCompromised) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceKeyCompromised) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


