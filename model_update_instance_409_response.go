/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateInstance409Response - struct for UpdateInstance409Response
type UpdateInstance409Response struct {
	InstanceKeyCompromisedError *InstanceKeyCompromisedError
	UnknownInstanceError *UnknownInstanceError
	UnregisteredPlotError *UnregisteredPlotError
}

// InstanceKeyCompromisedErrorAsUpdateInstance409Response is a convenience function that returns InstanceKeyCompromisedError wrapped in UpdateInstance409Response
func InstanceKeyCompromisedErrorAsUpdateInstance409Response(v *InstanceKeyCompromisedError) UpdateInstance409Response {
	return UpdateInstance409Response{
		InstanceKeyCompromisedError: v,
	}
}

// UnknownInstanceErrorAsUpdateInstance409Response is a convenience function that returns UnknownInstanceError wrapped in UpdateInstance409Response
func UnknownInstanceErrorAsUpdateInstance409Response(v *UnknownInstanceError) UpdateInstance409Response {
	return UpdateInstance409Response{
		UnknownInstanceError: v,
	}
}

// UnregisteredPlotErrorAsUpdateInstance409Response is a convenience function that returns UnregisteredPlotError wrapped in UpdateInstance409Response
func UnregisteredPlotErrorAsUpdateInstance409Response(v *UnregisteredPlotError) UpdateInstance409Response {
	return UpdateInstance409Response{
		UnregisteredPlotError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateInstance409Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InstanceKeyCompromisedError
	err = newStrictDecoder(data).Decode(&dst.InstanceKeyCompromisedError)
	if err == nil {
		jsonInstanceKeyCompromisedError, _ := json.Marshal(dst.InstanceKeyCompromisedError)
		if string(jsonInstanceKeyCompromisedError) == "{}" { // empty struct
			dst.InstanceKeyCompromisedError = nil
		} else {
			if err = validator.Validate(dst.InstanceKeyCompromisedError); err != nil {
				dst.InstanceKeyCompromisedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InstanceKeyCompromisedError = nil
	}

	// try to unmarshal data into UnknownInstanceError
	err = newStrictDecoder(data).Decode(&dst.UnknownInstanceError)
	if err == nil {
		jsonUnknownInstanceError, _ := json.Marshal(dst.UnknownInstanceError)
		if string(jsonUnknownInstanceError) == "{}" { // empty struct
			dst.UnknownInstanceError = nil
		} else {
			if err = validator.Validate(dst.UnknownInstanceError); err != nil {
				dst.UnknownInstanceError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnknownInstanceError = nil
	}

	// try to unmarshal data into UnregisteredPlotError
	err = newStrictDecoder(data).Decode(&dst.UnregisteredPlotError)
	if err == nil {
		jsonUnregisteredPlotError, _ := json.Marshal(dst.UnregisteredPlotError)
		if string(jsonUnregisteredPlotError) == "{}" { // empty struct
			dst.UnregisteredPlotError = nil
		} else {
			if err = validator.Validate(dst.UnregisteredPlotError); err != nil {
				dst.UnregisteredPlotError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnregisteredPlotError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InstanceKeyCompromisedError = nil
		dst.UnknownInstanceError = nil
		dst.UnregisteredPlotError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateInstance409Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateInstance409Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateInstance409Response) MarshalJSON() ([]byte, error) {
	if src.InstanceKeyCompromisedError != nil {
		return json.Marshal(&src.InstanceKeyCompromisedError)
	}

	if src.UnknownInstanceError != nil {
		return json.Marshal(&src.UnknownInstanceError)
	}

	if src.UnregisteredPlotError != nil {
		return json.Marshal(&src.UnregisteredPlotError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateInstance409Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InstanceKeyCompromisedError != nil {
		return obj.InstanceKeyCompromisedError
	}

	if obj.UnknownInstanceError != nil {
		return obj.UnknownInstanceError
	}

	if obj.UnregisteredPlotError != nil {
		return obj.UnregisteredPlotError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateInstance409Response) GetActualInstanceValue() (interface{}) {
	if obj.InstanceKeyCompromisedError != nil {
		return *obj.InstanceKeyCompromisedError
	}

	if obj.UnknownInstanceError != nil {
		return *obj.UnknownInstanceError
	}

	if obj.UnregisteredPlotError != nil {
		return *obj.UnregisteredPlotError
	}

	// all schemas are nil
	return nil
}

type NullableUpdateInstance409Response struct {
	value *UpdateInstance409Response
	isSet bool
}

func (v NullableUpdateInstance409Response) Get() *UpdateInstance409Response {
	return v.value
}

func (v *NullableUpdateInstance409Response) Set(val *UpdateInstance409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInstance409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInstance409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInstance409Response(val *UpdateInstance409Response) *NullableUpdateInstance409Response {
	return &NullableUpdateInstance409Response{value: val, isSet: true}
}

func (v NullableUpdateInstance409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInstance409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


