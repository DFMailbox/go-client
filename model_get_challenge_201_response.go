/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetChallenge201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetChallenge201Response{}

// GetChallenge201Response struct for GetChallenge201Response
type GetChallenge201Response struct {
	// A UUID (universally unique identifier)
	Challenge string `json:"challenge"`
}

type _GetChallenge201Response GetChallenge201Response

// NewGetChallenge201Response instantiates a new GetChallenge201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetChallenge201Response(challenge string) *GetChallenge201Response {
	this := GetChallenge201Response{}
	this.Challenge = challenge
	return &this
}

// NewGetChallenge201ResponseWithDefaults instantiates a new GetChallenge201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetChallenge201ResponseWithDefaults() *GetChallenge201Response {
	this := GetChallenge201Response{}
	return &this
}

// GetChallenge returns the Challenge field value
func (o *GetChallenge201Response) GetChallenge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value
// and a boolean to check if the value has been set.
func (o *GetChallenge201Response) GetChallengeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Challenge, true
}

// SetChallenge sets field value
func (o *GetChallenge201Response) SetChallenge(v string) {
	o.Challenge = v
}

func (o GetChallenge201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetChallenge201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["challenge"] = o.Challenge
	return toSerialize, nil
}

func (o *GetChallenge201Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"challenge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetChallenge201Response := _GetChallenge201Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetChallenge201Response)

	if err != nil {
		return err
	}

	*o = GetChallenge201Response(varGetChallenge201Response)

	return err
}

type NullableGetChallenge201Response struct {
	value *GetChallenge201Response
	isSet bool
}

func (v NullableGetChallenge201Response) Get() *GetChallenge201Response {
	return v.value
}

func (v *NullableGetChallenge201Response) Set(val *GetChallenge201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetChallenge201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetChallenge201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetChallenge201Response(val *GetChallenge201Response) *NullableGetChallenge201Response {
	return &NullableGetChallenge201Response{value: val, isSet: true}
}

func (v NullableGetChallenge201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetChallenge201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


