/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IntroduceInstance400Response - struct for IntroduceInstance400Response
type IntroduceInstance400Response struct {
	IntroduceInstance400ResponseOneOf *IntroduceInstance400ResponseOneOf
	IntroduceInstance400ResponseOneOf1 *IntroduceInstance400ResponseOneOf1
	IntroduceInstance400ResponseOneOf2 *IntroduceInstance400ResponseOneOf2
}

// IntroduceInstance400ResponseOneOfAsIntroduceInstance400Response is a convenience function that returns IntroduceInstance400ResponseOneOf wrapped in IntroduceInstance400Response
func IntroduceInstance400ResponseOneOfAsIntroduceInstance400Response(v *IntroduceInstance400ResponseOneOf) IntroduceInstance400Response {
	return IntroduceInstance400Response{
		IntroduceInstance400ResponseOneOf: v,
	}
}

// IntroduceInstance400ResponseOneOf1AsIntroduceInstance400Response is a convenience function that returns IntroduceInstance400ResponseOneOf1 wrapped in IntroduceInstance400Response
func IntroduceInstance400ResponseOneOf1AsIntroduceInstance400Response(v *IntroduceInstance400ResponseOneOf1) IntroduceInstance400Response {
	return IntroduceInstance400Response{
		IntroduceInstance400ResponseOneOf1: v,
	}
}

// IntroduceInstance400ResponseOneOf2AsIntroduceInstance400Response is a convenience function that returns IntroduceInstance400ResponseOneOf2 wrapped in IntroduceInstance400Response
func IntroduceInstance400ResponseOneOf2AsIntroduceInstance400Response(v *IntroduceInstance400ResponseOneOf2) IntroduceInstance400Response {
	return IntroduceInstance400Response{
		IntroduceInstance400ResponseOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntroduceInstance400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntroduceInstance400ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.IntroduceInstance400ResponseOneOf)
	if err == nil {
		jsonIntroduceInstance400ResponseOneOf, _ := json.Marshal(dst.IntroduceInstance400ResponseOneOf)
		if string(jsonIntroduceInstance400ResponseOneOf) == "{}" { // empty struct
			dst.IntroduceInstance400ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.IntroduceInstance400ResponseOneOf); err != nil {
				dst.IntroduceInstance400ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntroduceInstance400ResponseOneOf = nil
	}

	// try to unmarshal data into IntroduceInstance400ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.IntroduceInstance400ResponseOneOf1)
	if err == nil {
		jsonIntroduceInstance400ResponseOneOf1, _ := json.Marshal(dst.IntroduceInstance400ResponseOneOf1)
		if string(jsonIntroduceInstance400ResponseOneOf1) == "{}" { // empty struct
			dst.IntroduceInstance400ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.IntroduceInstance400ResponseOneOf1); err != nil {
				dst.IntroduceInstance400ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntroduceInstance400ResponseOneOf1 = nil
	}

	// try to unmarshal data into IntroduceInstance400ResponseOneOf2
	err = newStrictDecoder(data).Decode(&dst.IntroduceInstance400ResponseOneOf2)
	if err == nil {
		jsonIntroduceInstance400ResponseOneOf2, _ := json.Marshal(dst.IntroduceInstance400ResponseOneOf2)
		if string(jsonIntroduceInstance400ResponseOneOf2) == "{}" { // empty struct
			dst.IntroduceInstance400ResponseOneOf2 = nil
		} else {
			if err = validator.Validate(dst.IntroduceInstance400ResponseOneOf2); err != nil {
				dst.IntroduceInstance400ResponseOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntroduceInstance400ResponseOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntroduceInstance400ResponseOneOf = nil
		dst.IntroduceInstance400ResponseOneOf1 = nil
		dst.IntroduceInstance400ResponseOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntroduceInstance400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntroduceInstance400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntroduceInstance400Response) MarshalJSON() ([]byte, error) {
	if src.IntroduceInstance400ResponseOneOf != nil {
		return json.Marshal(&src.IntroduceInstance400ResponseOneOf)
	}

	if src.IntroduceInstance400ResponseOneOf1 != nil {
		return json.Marshal(&src.IntroduceInstance400ResponseOneOf1)
	}

	if src.IntroduceInstance400ResponseOneOf2 != nil {
		return json.Marshal(&src.IntroduceInstance400ResponseOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntroduceInstance400Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntroduceInstance400ResponseOneOf != nil {
		return obj.IntroduceInstance400ResponseOneOf
	}

	if obj.IntroduceInstance400ResponseOneOf1 != nil {
		return obj.IntroduceInstance400ResponseOneOf1
	}

	if obj.IntroduceInstance400ResponseOneOf2 != nil {
		return obj.IntroduceInstance400ResponseOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IntroduceInstance400Response) GetActualInstanceValue() (interface{}) {
	if obj.IntroduceInstance400ResponseOneOf != nil {
		return *obj.IntroduceInstance400ResponseOneOf
	}

	if obj.IntroduceInstance400ResponseOneOf1 != nil {
		return *obj.IntroduceInstance400ResponseOneOf1
	}

	if obj.IntroduceInstance400ResponseOneOf2 != nil {
		return *obj.IntroduceInstance400ResponseOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableIntroduceInstance400Response struct {
	value *IntroduceInstance400Response
	isSet bool
}

func (v NullableIntroduceInstance400Response) Get() *IntroduceInstance400Response {
	return v.value
}

func (v *NullableIntroduceInstance400Response) Set(val *IntroduceInstance400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableIntroduceInstance400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableIntroduceInstance400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntroduceInstance400Response(val *IntroduceInstance400Response) *NullableIntroduceInstance400Response {
	return &NullableIntroduceInstance400Response{value: val, isSet: true}
}

func (v NullableIntroduceInstance400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntroduceInstance400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


