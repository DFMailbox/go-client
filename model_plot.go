/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Plot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plot{}

// Plot A known plot
type Plot struct {
	// An id assigned by DiamondFire to identify a plot, this ID can be used in /plot <plot_id>
	PlotId int32 `json:"plot_id"`
	// A UUID (universally unique identifier)
	Owner string `json:"owner"`
	// A base64 URL encoded ed25519 public key
	PublicKey NullableString `json:"public_key"`
	// An `Address`, if null, means it has the private key has been compromised
	Address NullableString `json:"address"`
	// A mailbox item id that refers to an item in any mailbox
	MailboxMsgId int64 `json:"mailbox_msg_id"`
}

type _Plot Plot

// NewPlot instantiates a new Plot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlot(plotId int32, owner string, publicKey NullableString, address NullableString, mailboxMsgId int64) *Plot {
	this := Plot{}
	this.PlotId = plotId
	this.Owner = owner
	this.PublicKey = publicKey
	this.Address = address
	this.MailboxMsgId = mailboxMsgId
	return &this
}

// NewPlotWithDefaults instantiates a new Plot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlotWithDefaults() *Plot {
	this := Plot{}
	return &this
}

// GetPlotId returns the PlotId field value
func (o *Plot) GetPlotId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlotId
}

// GetPlotIdOk returns a tuple with the PlotId field value
// and a boolean to check if the value has been set.
func (o *Plot) GetPlotIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlotId, true
}

// SetPlotId sets field value
func (o *Plot) SetPlotId(v int32) {
	o.PlotId = v
}

// GetOwner returns the Owner field value
func (o *Plot) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *Plot) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *Plot) SetOwner(v string) {
	o.Owner = v
}

// GetPublicKey returns the PublicKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Plot) GetPublicKey() string {
	if o == nil || o.PublicKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.PublicKey.Get()
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Plot) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicKey.Get(), o.PublicKey.IsSet()
}

// SetPublicKey sets field value
func (o *Plot) SetPublicKey(v string) {
	o.PublicKey.Set(&v)
}

// GetAddress returns the Address field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Plot) GetAddress() string {
	if o == nil || o.Address.Get() == nil {
		var ret string
		return ret
	}

	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Plot) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// SetAddress sets field value
func (o *Plot) SetAddress(v string) {
	o.Address.Set(&v)
}

// GetMailboxMsgId returns the MailboxMsgId field value
func (o *Plot) GetMailboxMsgId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MailboxMsgId
}

// GetMailboxMsgIdOk returns a tuple with the MailboxMsgId field value
// and a boolean to check if the value has been set.
func (o *Plot) GetMailboxMsgIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MailboxMsgId, true
}

// SetMailboxMsgId sets field value
func (o *Plot) SetMailboxMsgId(v int64) {
	o.MailboxMsgId = v
}

func (o Plot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plot_id"] = o.PlotId
	toSerialize["owner"] = o.Owner
	toSerialize["public_key"] = o.PublicKey.Get()
	toSerialize["address"] = o.Address.Get()
	toSerialize["mailbox_msg_id"] = o.MailboxMsgId
	return toSerialize, nil
}

func (o *Plot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plot_id",
		"owner",
		"public_key",
		"address",
		"mailbox_msg_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlot := _Plot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlot)

	if err != nil {
		return err
	}

	*o = Plot(varPlot)

	return err
}

type NullablePlot struct {
	value *Plot
	isSet bool
}

func (v NullablePlot) Get() *Plot {
	return v.value
}

func (v *NullablePlot) Set(val *Plot) {
	v.value = val
	v.isSet = true
}

func (v NullablePlot) IsSet() bool {
	return v.isSet
}

func (v *NullablePlot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlot(val *Plot) *NullablePlot {
	return &NullablePlot{value: val, isSet: true}
}

func (v NullablePlot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


