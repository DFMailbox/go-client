/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InvalidRequestParameterError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidRequestParameterError{}

// InvalidRequestParameterError Invalid request parameter
type InvalidRequestParameterError struct {
	Type interface{} `json:"type"`
	Title interface{} `json:"title"`
	// HTTP status code
	Status int32 `json:"status"`
	Detail string `json:"detail"`
	Errors interface{} `json:"errors,omitempty"`
}

type _InvalidRequestParameterError InvalidRequestParameterError

// NewInvalidRequestParameterError instantiates a new InvalidRequestParameterError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidRequestParameterError(type_ interface{}, title interface{}, status int32, detail string) *InvalidRequestParameterError {
	this := InvalidRequestParameterError{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.Detail = detail
	return &this
}

// NewInvalidRequestParameterErrorWithDefaults instantiates a new InvalidRequestParameterError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidRequestParameterErrorWithDefaults() *InvalidRequestParameterError {
	this := InvalidRequestParameterError{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InvalidRequestParameterError) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidRequestParameterError) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InvalidRequestParameterError) SetType(v interface{}) {
	o.Type = v
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InvalidRequestParameterError) GetTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidRequestParameterError) GetTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InvalidRequestParameterError) SetTitle(v interface{}) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *InvalidRequestParameterError) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InvalidRequestParameterError) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InvalidRequestParameterError) SetStatus(v int32) {
	o.Status = v
}

// GetDetail returns the Detail field value
func (o *InvalidRequestParameterError) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *InvalidRequestParameterError) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *InvalidRequestParameterError) SetDetail(v string) {
	o.Detail = v
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvalidRequestParameterError) GetErrors() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidRequestParameterError) GetErrorsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return &o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *InvalidRequestParameterError) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given interface{} and assigns it to the Errors field.
func (o *InvalidRequestParameterError) SetErrors(v interface{}) {
	o.Errors = v
}

func (o InvalidRequestParameterError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidRequestParameterError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	toSerialize["status"] = o.Status
	toSerialize["detail"] = o.Detail
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *InvalidRequestParameterError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"status",
		"detail",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvalidRequestParameterError := _InvalidRequestParameterError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvalidRequestParameterError)

	if err != nil {
		return err
	}

	*o = InvalidRequestParameterError(varInvalidRequestParameterError)

	return err
}

type NullableInvalidRequestParameterError struct {
	value *InvalidRequestParameterError
	isSet bool
}

func (v NullableInvalidRequestParameterError) Get() *InvalidRequestParameterError {
	return v.value
}

func (v *NullableInvalidRequestParameterError) Set(val *InvalidRequestParameterError) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidRequestParameterError) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidRequestParameterError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidRequestParameterError(val *InvalidRequestParameterError) *NullableInvalidRequestParameterError {
	return &NullableInvalidRequestParameterError{value: val, isSet: true}
}

func (v NullableInvalidRequestParameterError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidRequestParameterError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


