/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// InlineObject5 - struct for InlineObject5
type InlineObject5 struct {
	AlreadyExistsError *AlreadyExistsError
	InlineObject5OneOf *InlineObject5OneOf
	InlineObject5OneOf1 *InlineObject5OneOf1
	InstanceUnreachableError *InstanceUnreachableError
	NoEffectUpdateError *NoEffectUpdateError
	NonComplianceError *NonComplianceError
}

// AlreadyExistsErrorAsInlineObject5 is a convenience function that returns AlreadyExistsError wrapped in InlineObject5
func AlreadyExistsErrorAsInlineObject5(v *AlreadyExistsError) InlineObject5 {
	return InlineObject5{
		AlreadyExistsError: v,
	}
}

// InlineObject5OneOfAsInlineObject5 is a convenience function that returns InlineObject5OneOf wrapped in InlineObject5
func InlineObject5OneOfAsInlineObject5(v *InlineObject5OneOf) InlineObject5 {
	return InlineObject5{
		InlineObject5OneOf: v,
	}
}

// InlineObject5OneOf1AsInlineObject5 is a convenience function that returns InlineObject5OneOf1 wrapped in InlineObject5
func InlineObject5OneOf1AsInlineObject5(v *InlineObject5OneOf1) InlineObject5 {
	return InlineObject5{
		InlineObject5OneOf1: v,
	}
}

// InstanceUnreachableErrorAsInlineObject5 is a convenience function that returns InstanceUnreachableError wrapped in InlineObject5
func InstanceUnreachableErrorAsInlineObject5(v *InstanceUnreachableError) InlineObject5 {
	return InlineObject5{
		InstanceUnreachableError: v,
	}
}

// NoEffectUpdateErrorAsInlineObject5 is a convenience function that returns NoEffectUpdateError wrapped in InlineObject5
func NoEffectUpdateErrorAsInlineObject5(v *NoEffectUpdateError) InlineObject5 {
	return InlineObject5{
		NoEffectUpdateError: v,
	}
}

// NonComplianceErrorAsInlineObject5 is a convenience function that returns NonComplianceError wrapped in InlineObject5
func NonComplianceErrorAsInlineObject5(v *NonComplianceError) InlineObject5 {
	return InlineObject5{
		NonComplianceError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *InlineObject5) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AlreadyExistsError
	err = newStrictDecoder(data).Decode(&dst.AlreadyExistsError)
	if err == nil {
		jsonAlreadyExistsError, _ := json.Marshal(dst.AlreadyExistsError)
		if string(jsonAlreadyExistsError) == "{}" { // empty struct
			dst.AlreadyExistsError = nil
		} else {
			if err = validator.Validate(dst.AlreadyExistsError); err != nil {
				dst.AlreadyExistsError = nil
			} else {
				match++
			}
		}
	} else {
		dst.AlreadyExistsError = nil
	}

	// try to unmarshal data into InlineObject5OneOf
	err = newStrictDecoder(data).Decode(&dst.InlineObject5OneOf)
	if err == nil {
		jsonInlineObject5OneOf, _ := json.Marshal(dst.InlineObject5OneOf)
		if string(jsonInlineObject5OneOf) == "{}" { // empty struct
			dst.InlineObject5OneOf = nil
		} else {
			if err = validator.Validate(dst.InlineObject5OneOf); err != nil {
				dst.InlineObject5OneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.InlineObject5OneOf = nil
	}

	// try to unmarshal data into InlineObject5OneOf1
	err = newStrictDecoder(data).Decode(&dst.InlineObject5OneOf1)
	if err == nil {
		jsonInlineObject5OneOf1, _ := json.Marshal(dst.InlineObject5OneOf1)
		if string(jsonInlineObject5OneOf1) == "{}" { // empty struct
			dst.InlineObject5OneOf1 = nil
		} else {
			if err = validator.Validate(dst.InlineObject5OneOf1); err != nil {
				dst.InlineObject5OneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.InlineObject5OneOf1 = nil
	}

	// try to unmarshal data into InstanceUnreachableError
	err = newStrictDecoder(data).Decode(&dst.InstanceUnreachableError)
	if err == nil {
		jsonInstanceUnreachableError, _ := json.Marshal(dst.InstanceUnreachableError)
		if string(jsonInstanceUnreachableError) == "{}" { // empty struct
			dst.InstanceUnreachableError = nil
		} else {
			if err = validator.Validate(dst.InstanceUnreachableError); err != nil {
				dst.InstanceUnreachableError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InstanceUnreachableError = nil
	}

	// try to unmarshal data into NoEffectUpdateError
	err = newStrictDecoder(data).Decode(&dst.NoEffectUpdateError)
	if err == nil {
		jsonNoEffectUpdateError, _ := json.Marshal(dst.NoEffectUpdateError)
		if string(jsonNoEffectUpdateError) == "{}" { // empty struct
			dst.NoEffectUpdateError = nil
		} else {
			if err = validator.Validate(dst.NoEffectUpdateError); err != nil {
				dst.NoEffectUpdateError = nil
			} else {
				match++
			}
		}
	} else {
		dst.NoEffectUpdateError = nil
	}

	// try to unmarshal data into NonComplianceError
	err = newStrictDecoder(data).Decode(&dst.NonComplianceError)
	if err == nil {
		jsonNonComplianceError, _ := json.Marshal(dst.NonComplianceError)
		if string(jsonNonComplianceError) == "{}" { // empty struct
			dst.NonComplianceError = nil
		} else {
			if err = validator.Validate(dst.NonComplianceError); err != nil {
				dst.NonComplianceError = nil
			} else {
				match++
			}
		}
	} else {
		dst.NonComplianceError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AlreadyExistsError = nil
		dst.InlineObject5OneOf = nil
		dst.InlineObject5OneOf1 = nil
		dst.InstanceUnreachableError = nil
		dst.NoEffectUpdateError = nil
		dst.NonComplianceError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InlineObject5)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InlineObject5)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InlineObject5) MarshalJSON() ([]byte, error) {
	if src.AlreadyExistsError != nil {
		return json.Marshal(&src.AlreadyExistsError)
	}

	if src.InlineObject5OneOf != nil {
		return json.Marshal(&src.InlineObject5OneOf)
	}

	if src.InlineObject5OneOf1 != nil {
		return json.Marshal(&src.InlineObject5OneOf1)
	}

	if src.InstanceUnreachableError != nil {
		return json.Marshal(&src.InstanceUnreachableError)
	}

	if src.NoEffectUpdateError != nil {
		return json.Marshal(&src.NoEffectUpdateError)
	}

	if src.NonComplianceError != nil {
		return json.Marshal(&src.NonComplianceError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InlineObject5) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AlreadyExistsError != nil {
		return obj.AlreadyExistsError
	}

	if obj.InlineObject5OneOf != nil {
		return obj.InlineObject5OneOf
	}

	if obj.InlineObject5OneOf1 != nil {
		return obj.InlineObject5OneOf1
	}

	if obj.InstanceUnreachableError != nil {
		return obj.InstanceUnreachableError
	}

	if obj.NoEffectUpdateError != nil {
		return obj.NoEffectUpdateError
	}

	if obj.NonComplianceError != nil {
		return obj.NonComplianceError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj InlineObject5) GetActualInstanceValue() (interface{}) {
	if obj.AlreadyExistsError != nil {
		return *obj.AlreadyExistsError
	}

	if obj.InlineObject5OneOf != nil {
		return *obj.InlineObject5OneOf
	}

	if obj.InlineObject5OneOf1 != nil {
		return *obj.InlineObject5OneOf1
	}

	if obj.InstanceUnreachableError != nil {
		return *obj.InstanceUnreachableError
	}

	if obj.NoEffectUpdateError != nil {
		return *obj.NoEffectUpdateError
	}

	if obj.NonComplianceError != nil {
		return *obj.NonComplianceError
	}

	// all schemas are nil
	return nil
}

type NullableInlineObject5 struct {
	value *InlineObject5
	isSet bool
}

func (v NullableInlineObject5) Get() *InlineObject5 {
	return v.value
}

func (v *NullableInlineObject5) Set(val *InlineObject5) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject5) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject5(val *InlineObject5) *NullableInlineObject5 {
	return &NullableInlineObject5{value: val, isSet: true}
}

func (v NullableInlineObject5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


