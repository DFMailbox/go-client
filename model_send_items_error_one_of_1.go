/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendItemsErrorOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendItemsErrorOneOf1{}

// SendItemsErrorOneOf1 struct for SendItemsErrorOneOf1
type SendItemsErrorOneOf1 struct {
	Type interface{} `json:"type"`
	Title interface{} `json:"title"`
	// HTTP status code
	Status int32 `json:"status"`
	Detail string `json:"detail"`
	// An id assigned by DiamondFire to identify a plot, this ID can be used in /plot <plot_id>
	Sender int32 `json:"sender"`
	// A base64 URL encoded ed25519 public key
	ActualKey string `json:"actual_key"`
	// A base64 URL encoded ed25519 public key
	ExpectedKey string `json:"expected_key"`
}

type _SendItemsErrorOneOf1 SendItemsErrorOneOf1

// NewSendItemsErrorOneOf1 instantiates a new SendItemsErrorOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendItemsErrorOneOf1(type_ interface{}, title interface{}, status int32, detail string, sender int32, actualKey string, expectedKey string) *SendItemsErrorOneOf1 {
	this := SendItemsErrorOneOf1{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.Detail = detail
	this.Sender = sender
	this.ActualKey = actualKey
	this.ExpectedKey = expectedKey
	return &this
}

// NewSendItemsErrorOneOf1WithDefaults instantiates a new SendItemsErrorOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendItemsErrorOneOf1WithDefaults() *SendItemsErrorOneOf1 {
	this := SendItemsErrorOneOf1{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SendItemsErrorOneOf1) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendItemsErrorOneOf1) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SendItemsErrorOneOf1) SetType(v interface{}) {
	o.Type = v
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SendItemsErrorOneOf1) GetTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendItemsErrorOneOf1) GetTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SendItemsErrorOneOf1) SetTitle(v interface{}) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *SendItemsErrorOneOf1) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SendItemsErrorOneOf1) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SendItemsErrorOneOf1) SetStatus(v int32) {
	o.Status = v
}

// GetDetail returns the Detail field value
func (o *SendItemsErrorOneOf1) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *SendItemsErrorOneOf1) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *SendItemsErrorOneOf1) SetDetail(v string) {
	o.Detail = v
}

// GetSender returns the Sender field value
func (o *SendItemsErrorOneOf1) GetSender() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *SendItemsErrorOneOf1) GetSenderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *SendItemsErrorOneOf1) SetSender(v int32) {
	o.Sender = v
}

// GetActualKey returns the ActualKey field value
func (o *SendItemsErrorOneOf1) GetActualKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActualKey
}

// GetActualKeyOk returns a tuple with the ActualKey field value
// and a boolean to check if the value has been set.
func (o *SendItemsErrorOneOf1) GetActualKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActualKey, true
}

// SetActualKey sets field value
func (o *SendItemsErrorOneOf1) SetActualKey(v string) {
	o.ActualKey = v
}

// GetExpectedKey returns the ExpectedKey field value
func (o *SendItemsErrorOneOf1) GetExpectedKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpectedKey
}

// GetExpectedKeyOk returns a tuple with the ExpectedKey field value
// and a boolean to check if the value has been set.
func (o *SendItemsErrorOneOf1) GetExpectedKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpectedKey, true
}

// SetExpectedKey sets field value
func (o *SendItemsErrorOneOf1) SetExpectedKey(v string) {
	o.ExpectedKey = v
}

func (o SendItemsErrorOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendItemsErrorOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	toSerialize["status"] = o.Status
	toSerialize["detail"] = o.Detail
	toSerialize["sender"] = o.Sender
	toSerialize["actual_key"] = o.ActualKey
	toSerialize["expected_key"] = o.ExpectedKey
	return toSerialize, nil
}

func (o *SendItemsErrorOneOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"status",
		"detail",
		"sender",
		"actual_key",
		"expected_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendItemsErrorOneOf1 := _SendItemsErrorOneOf1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendItemsErrorOneOf1)

	if err != nil {
		return err
	}

	*o = SendItemsErrorOneOf1(varSendItemsErrorOneOf1)

	return err
}

type NullableSendItemsErrorOneOf1 struct {
	value *SendItemsErrorOneOf1
	isSet bool
}

func (v NullableSendItemsErrorOneOf1) Get() *SendItemsErrorOneOf1 {
	return v.value
}

func (v *NullableSendItemsErrorOneOf1) Set(val *SendItemsErrorOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableSendItemsErrorOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableSendItemsErrorOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendItemsErrorOneOf1(val *SendItemsErrorOneOf1) *NullableSendItemsErrorOneOf1 {
	return &NullableSendItemsErrorOneOf1{value: val, isSet: true}
}

func (v NullableSendItemsErrorOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendItemsErrorOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


