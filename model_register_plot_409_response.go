/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RegisterPlot409Response - struct for RegisterPlot409Response
type RegisterPlot409Response struct {
	UpdateInstance409ResponseOneOf1 *UpdateInstance409ResponseOneOf1
	UpdateInstance409ResponseOneOf2 *UpdateInstance409ResponseOneOf2
}

// UpdateInstance409ResponseOneOf1AsRegisterPlot409Response is a convenience function that returns UpdateInstance409ResponseOneOf1 wrapped in RegisterPlot409Response
func UpdateInstance409ResponseOneOf1AsRegisterPlot409Response(v *UpdateInstance409ResponseOneOf1) RegisterPlot409Response {
	return RegisterPlot409Response{
		UpdateInstance409ResponseOneOf1: v,
	}
}

// UpdateInstance409ResponseOneOf2AsRegisterPlot409Response is a convenience function that returns UpdateInstance409ResponseOneOf2 wrapped in RegisterPlot409Response
func UpdateInstance409ResponseOneOf2AsRegisterPlot409Response(v *UpdateInstance409ResponseOneOf2) RegisterPlot409Response {
	return RegisterPlot409Response{
		UpdateInstance409ResponseOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RegisterPlot409Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateInstance409ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.UpdateInstance409ResponseOneOf1)
	if err == nil {
		jsonUpdateInstance409ResponseOneOf1, _ := json.Marshal(dst.UpdateInstance409ResponseOneOf1)
		if string(jsonUpdateInstance409ResponseOneOf1) == "{}" { // empty struct
			dst.UpdateInstance409ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.UpdateInstance409ResponseOneOf1); err != nil {
				dst.UpdateInstance409ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateInstance409ResponseOneOf1 = nil
	}

	// try to unmarshal data into UpdateInstance409ResponseOneOf2
	err = newStrictDecoder(data).Decode(&dst.UpdateInstance409ResponseOneOf2)
	if err == nil {
		jsonUpdateInstance409ResponseOneOf2, _ := json.Marshal(dst.UpdateInstance409ResponseOneOf2)
		if string(jsonUpdateInstance409ResponseOneOf2) == "{}" { // empty struct
			dst.UpdateInstance409ResponseOneOf2 = nil
		} else {
			if err = validator.Validate(dst.UpdateInstance409ResponseOneOf2); err != nil {
				dst.UpdateInstance409ResponseOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateInstance409ResponseOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateInstance409ResponseOneOf1 = nil
		dst.UpdateInstance409ResponseOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RegisterPlot409Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RegisterPlot409Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RegisterPlot409Response) MarshalJSON() ([]byte, error) {
	if src.UpdateInstance409ResponseOneOf1 != nil {
		return json.Marshal(&src.UpdateInstance409ResponseOneOf1)
	}

	if src.UpdateInstance409ResponseOneOf2 != nil {
		return json.Marshal(&src.UpdateInstance409ResponseOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RegisterPlot409Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpdateInstance409ResponseOneOf1 != nil {
		return obj.UpdateInstance409ResponseOneOf1
	}

	if obj.UpdateInstance409ResponseOneOf2 != nil {
		return obj.UpdateInstance409ResponseOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RegisterPlot409Response) GetActualInstanceValue() (interface{}) {
	if obj.UpdateInstance409ResponseOneOf1 != nil {
		return *obj.UpdateInstance409ResponseOneOf1
	}

	if obj.UpdateInstance409ResponseOneOf2 != nil {
		return *obj.UpdateInstance409ResponseOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableRegisterPlot409Response struct {
	value *RegisterPlot409Response
	isSet bool
}

func (v NullableRegisterPlot409Response) Get() *RegisterPlot409Response {
	return v.value
}

func (v *NullableRegisterPlot409Response) Set(val *RegisterPlot409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterPlot409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterPlot409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterPlot409Response(val *RegisterPlot409Response) *NullableRegisterPlot409Response {
	return &NullableRegisterPlot409Response{value: val, isSet: true}
}

func (v NullableRegisterPlot409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterPlot409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


