/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RegisterPlot409Response - struct for RegisterPlot409Response
type RegisterPlot409Response struct {
	InstanceKeyCompromised *InstanceKeyCompromised
	UnknownInstanceError *UnknownInstanceError
}

// InstanceKeyCompromisedAsRegisterPlot409Response is a convenience function that returns InstanceKeyCompromised wrapped in RegisterPlot409Response
func InstanceKeyCompromisedAsRegisterPlot409Response(v *InstanceKeyCompromised) RegisterPlot409Response {
	return RegisterPlot409Response{
		InstanceKeyCompromised: v,
	}
}

// UnknownInstanceErrorAsRegisterPlot409Response is a convenience function that returns UnknownInstanceError wrapped in RegisterPlot409Response
func UnknownInstanceErrorAsRegisterPlot409Response(v *UnknownInstanceError) RegisterPlot409Response {
	return RegisterPlot409Response{
		UnknownInstanceError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RegisterPlot409Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InstanceKeyCompromised
	err = newStrictDecoder(data).Decode(&dst.InstanceKeyCompromised)
	if err == nil {
		jsonInstanceKeyCompromised, _ := json.Marshal(dst.InstanceKeyCompromised)
		if string(jsonInstanceKeyCompromised) == "{}" { // empty struct
			dst.InstanceKeyCompromised = nil
		} else {
			if err = validator.Validate(dst.InstanceKeyCompromised); err != nil {
				dst.InstanceKeyCompromised = nil
			} else {
				match++
			}
		}
	} else {
		dst.InstanceKeyCompromised = nil
	}

	// try to unmarshal data into UnknownInstanceError
	err = newStrictDecoder(data).Decode(&dst.UnknownInstanceError)
	if err == nil {
		jsonUnknownInstanceError, _ := json.Marshal(dst.UnknownInstanceError)
		if string(jsonUnknownInstanceError) == "{}" { // empty struct
			dst.UnknownInstanceError = nil
		} else {
			if err = validator.Validate(dst.UnknownInstanceError); err != nil {
				dst.UnknownInstanceError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnknownInstanceError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InstanceKeyCompromised = nil
		dst.UnknownInstanceError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RegisterPlot409Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RegisterPlot409Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RegisterPlot409Response) MarshalJSON() ([]byte, error) {
	if src.InstanceKeyCompromised != nil {
		return json.Marshal(&src.InstanceKeyCompromised)
	}

	if src.UnknownInstanceError != nil {
		return json.Marshal(&src.UnknownInstanceError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RegisterPlot409Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InstanceKeyCompromised != nil {
		return obj.InstanceKeyCompromised
	}

	if obj.UnknownInstanceError != nil {
		return obj.UnknownInstanceError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RegisterPlot409Response) GetActualInstanceValue() (interface{}) {
	if obj.InstanceKeyCompromised != nil {
		return *obj.InstanceKeyCompromised
	}

	if obj.UnknownInstanceError != nil {
		return *obj.UnknownInstanceError
	}

	// all schemas are nil
	return nil
}

type NullableRegisterPlot409Response struct {
	value *RegisterPlot409Response
	isSet bool
}

func (v NullableRegisterPlot409Response) Get() *RegisterPlot409Response {
	return v.value
}

func (v *NullableRegisterPlot409Response) Set(val *RegisterPlot409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterPlot409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterPlot409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterPlot409Response(val *RegisterPlot409Response) *NullableRegisterPlot409Response {
	return &NullableRegisterPlot409Response{value: val, isSet: true}
}

func (v NullableRegisterPlot409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterPlot409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


