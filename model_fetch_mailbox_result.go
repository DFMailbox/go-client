/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FetchMailboxResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchMailboxResult{}

// FetchMailboxResult A response for any request that returns mailbox items
type FetchMailboxResult struct {
	Items interface{} `json:"items"`
	// A mailbox item id that refers to an item in any mailbox
	Until int64 `json:"until"`
	// A mailbox item id that refers to an item in any mailbox
	CurrentId int64 `json:"current_id"`
}

type _FetchMailboxResult FetchMailboxResult

// NewFetchMailboxResult instantiates a new FetchMailboxResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchMailboxResult(items interface{}, until int64, currentId int64) *FetchMailboxResult {
	this := FetchMailboxResult{}
	this.Items = items
	this.Until = until
	this.CurrentId = currentId
	return &this
}

// NewFetchMailboxResultWithDefaults instantiates a new FetchMailboxResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchMailboxResultWithDefaults() *FetchMailboxResult {
	this := FetchMailboxResult{}
	return &this
}

// GetItems returns the Items field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *FetchMailboxResult) GetItems() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FetchMailboxResult) GetItemsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *FetchMailboxResult) SetItems(v interface{}) {
	o.Items = v
}

// GetUntil returns the Until field value
func (o *FetchMailboxResult) GetUntil() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Until
}

// GetUntilOk returns a tuple with the Until field value
// and a boolean to check if the value has been set.
func (o *FetchMailboxResult) GetUntilOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Until, true
}

// SetUntil sets field value
func (o *FetchMailboxResult) SetUntil(v int64) {
	o.Until = v
}

// GetCurrentId returns the CurrentId field value
func (o *FetchMailboxResult) GetCurrentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CurrentId
}

// GetCurrentIdOk returns a tuple with the CurrentId field value
// and a boolean to check if the value has been set.
func (o *FetchMailboxResult) GetCurrentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentId, true
}

// SetCurrentId sets field value
func (o *FetchMailboxResult) SetCurrentId(v int64) {
	o.CurrentId = v
}

func (o FetchMailboxResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchMailboxResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	toSerialize["until"] = o.Until
	toSerialize["current_id"] = o.CurrentId
	return toSerialize, nil
}

func (o *FetchMailboxResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"until",
		"current_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFetchMailboxResult := _FetchMailboxResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchMailboxResult)

	if err != nil {
		return err
	}

	*o = FetchMailboxResult(varFetchMailboxResult)

	return err
}

type NullableFetchMailboxResult struct {
	value *FetchMailboxResult
	isSet bool
}

func (v NullableFetchMailboxResult) Get() *FetchMailboxResult {
	return v.value
}

func (v *NullableFetchMailboxResult) Set(val *FetchMailboxResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchMailboxResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchMailboxResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchMailboxResult(val *FetchMailboxResult) *NullableFetchMailboxResult {
	return &NullableFetchMailboxResult{value: val, isSet: true}
}

func (v NullableFetchMailboxResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchMailboxResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


