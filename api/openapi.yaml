openapi: 3.1.0
info:
  description: DFMailbox is a decentralized way to send messages to other DiamondFire
    plots.
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: DFMailbox API
  version: 0.6.3
externalDocs:
  description: External docs can be found here
  url: https://dfmailbox.dev/
servers:
- url: "http://{host}:{port}/v0"
  variables:
    host:
      default: localhost
    port:
      default: "8080"
- url: https://api.dfmailbox.dev/v0
- url: https://api2.dfmailbox.dev/v0
tags:
- description: Everything that plots can do
  name: plot
- description: Some miscellaneous methods for this instance
  name: instance
- description: "Used by other instances to communicate, plots shouldn't need to call\
    \ these methods"
  name: federation
paths:
  /plot:
    delete:
      description: "If this plot was previously owned by this instance, all the mailbox\
        \ contents and trusted plots will be deleted."
      operationId: unregisterPlot
      responses:
        "200":
          description: OK
        "409":
          content:
            application/problem+json:
              example:
                type: /v0/problems/unregistered-plot
                title: Target plot is not registered
                status: 409
                detail: The plot with id 51998 is not registered and can't be unregistered
                plot_id: 51998
              schema:
                $ref: '#/components/schemas/UnregisteredPlotError'
          description: Plot deletion error
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedRegistered'
      security:
      - ApiKey: []
      - Plot: []
      summary: Unregister plot
      tags:
      - plot
    get:
      description: Returns the general information of the plot. Doesn't return the
        trusted plots.
      operationId: getPlotInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plot'
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedRegistered'
      security:
      - ApiKey: []
      - Plot: []
      summary: Get plot info
      tags:
      - plot
    post:
      description: Register the authenticated plot
      operationId: registerPlot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateInstance_request'
        description: "The public key of the owned instance. If registering to this\
          \ instance, use a null"
        required: true
      responses:
        "201":
          description: OK
        "409":
          content:
            application/problem+json:
              example:
                type: /v0/problems/unknown-instance
                title: Specified instance has not been identified
                status: 409
                detail: The instance with key 2Z-eAxSo7qGL8OGIzpi-DGcPAVR16xoo9gUpR6Ut9ww
                  is not identified
                public_key: 2Z-eAxSo7qGL8OGIzpi-DGcPAVR16xoo9gUpR6Ut9ww
              schema:
                $ref: '#/components/schemas/registerPlot_409_response'
          description: Plot registration error
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedUnregistered'
      security:
      - ApiKey: []
      - Plot: []
      summary: Register plot
      tags:
      - plot
    put:
      description: "Change the instance public key. If the key is null, all the mailbox\
        \ contents and trusted plots will be deleted."
      operationId: updateInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateInstance_request'
        description: "The public key of your new instance, null for this instance"
        required: true
      responses:
        "200":
          description: OK
        "409":
          content:
            application/problem+json:
              example:
                type: /v0/problems/unknown-instance
                title: Specified instance has not been identified
                status: 409
                detail: The instance with key k2k4r4+0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uM
                  is not identified
                address: api2.dfmailbox.dev
              schema:
                $ref: '#/components/schemas/updateInstance_409_response'
          description: Plot instance instance replacement error
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedRegistered'
      security:
      - ApiKey: []
      - Plot: []
      summary: Change plot instance
      tags:
      - plot
  /plot/mailbox:
    delete:
      description: Gets items with an id that is greated than msg_id and deletes items
        that are less than or equal to msg_id. This prevents the mailbox from being
        filled with useless data.
      operationId: checkCleanMailbox
      parameters:
      - $ref: '#/components/parameters/MessageId'
      - $ref: '#/components/parameters/MessageLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchMailboxResult'
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Check and cleanup mailbox
      tags:
      - plot
    get:
      description: Gets items with an id that is greated than msg_id
      operationId: checkMailbox
      parameters:
      - $ref: '#/components/parameters/MessageId'
      - $ref: '#/components/parameters/MessageLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchMailboxResult'
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Check mailbox for items
      tags:
      - plot
    post:
      description: Append a list of items to the back of the mailbox
      operationId: sendMailToSelf
      requestBody:
        $ref: '#/components/requestBodies/SendItems'
      responses:
        "200":
          $ref: '#/components/responses/SendItemsResult'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Send items to mailbox
      tags:
      - plot
  /plot/query:
    post:
      description: Runs a list of mailbox queries and returns the result in the same
        order. Usually this is ran automatically by the provided dfmailbox library.
        It doesn't really make sense to hit this endpoint in a non DF plot context.
      operationId: query
      requestBody:
        content:
          application/json:
            example:
            - type: send
              to: 42998
              value:
              - type: chat
                name: DynamicCake
                msg: "The `id: chat` field isn't defined by diamondfire, rather by\
                  \ the plots themselves"
              - type: chat
                name: DynamicCake
                msg: "This field is merely a convention, not a standard"
            - type: peek_clean
              after: 55
            schema: {}
        description: A list of mailbox query operations
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
              - type: send
                msg_id: 43
              - type: peek_clean
                result:
                  items:
                  - msg_id: 56
                    timestamp: 1746169563
                    plot_origin: 42998
                    val:
                      type: chat
                      name: Sputt
                      msg: Hello world
                  - msg_id: 57
                    timestamp: 1746169610
                    plot_origin: 42998
                    val:
                      type: chat
                      name: Notch
                      msg: Oh hi I am the real Notch
                  until: 57
                  current_id: 57
              schema: {}
          description: Processed all queries
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Run mailbox query
      tags:
      - plot
  /plot/api-key:
    delete:
      description: Revokes every api key including the one you are using. This only
        revokes keys on this instance.
      operationId: revokeAllApiKeys
      responses:
        "200":
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedRegistered'
      security:
      - ApiKey: []
      - Plot: []
      summary: Revoke all API keys
      tags:
      - plot
    get:
      description: Return all non revoked SHA256 hashed API keys
      operationId: getApiKeyHashes
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedRegistered'
      security:
      - ApiKey: []
      - Plot: []
      summary: List all API key hashes
      tags:
      - plot
    post:
      description: "Generate an API key (any random string of utf-8 bytes) while storing\
        \ a hashed version. Once lost, the key cannot be recovered."
      operationId: createApiKey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createApiKey_200_response'
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedRegistered'
      security:
      - ApiKey: []
      - Plot: []
      summary: Create an API Key
      tags:
      - plot
  /plot/trust:
    delete:
      description: Remove trust from plots. Does not check if plots are trusted or
        even exist
      operationId: untrustPlot
      parameters:
      - description: "A list of comma separated plots to un-trust, empty means un-trust\
          \ all"
        example: "51998,51999"
        explode: true
        in: query
        name: plots
        required: false
        schema:
          description: Space separated plotIds
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - 206028
              - 42998
              schema: {}
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Un-trust plots
      tags:
      - plot
    get:
      description: List all plot ids that are trusted
      operationId: getTrusted
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: OK
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Get trusted plots
      tags:
      - plot
    post:
      description: Add plots to trust list
      operationId: trustPlots
      requestBody:
        content:
          application/json:
            schema: {}
        description: Plots to trust
        required: true
      responses:
        "200":
          description: OK
        "409":
          content:
            application/problem+json:
              example:
                type: /v0/problems/unregistered-plots
                title: There are unregistered plots
                status: 409
                detail: The plot with id 51998 is not registered
                plot_ids:
                - 51998
              schema:
                $ref: '#/components/schemas/UnregisteredPlotsError'
          description: Plot doesn't exist
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Trust plots
      tags:
      - plot
  /plots/{plot_id}:
    get:
      description: Returns the general information of the plot. Doesn't return the
        trusted plots.
      operationId: lookupPlot
      parameters:
      - $ref: '#/components/parameters/PlotId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plot'
          description: Found
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnregisteredPlotError'
          description: Plot not registered
      security:
      - ApiKey: []
      - Plot: []
      summary: Get another plot's info
      tags:
      - plot
  /plots/{plot_id}/mailbox:
    post:
      description: Sends an item to another mailbox. This mailbox can be from another
        instance.
      operationId: sendMail
      parameters:
      - $ref: '#/components/parameters/PlotId'
      requestBody:
        $ref: '#/components/requestBodies/SendItems'
      responses:
        "200":
          $ref: '#/components/responses/SendItemsResult'
        "400":
          content:
            application/problem+json:
              example:
                type: /v0/problems/unregistered-plot
                title: Target plot is not registered
                status: 400
                detail: The plot with id 51998 is not registered and can't be unregistered
                plot_id: 51998
              schema:
                $ref: '#/components/schemas/SendItemsError'
          description: Plot not registered
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/ExpectedHostAuth'
      security:
      - ApiKey: []
      - Plot: []
      summary: Send an item into another mailbox
      tags:
      - plot
  /instance:
    get:
      description: This is to check what the instance thinks the address is
      operationId: lookupInstanceAddress
      parameters:
      - description: The server key to check the address of
        explode: true
        in: query
        name: public_key
        required: false
        schema:
          $ref: '#/components/schemas/PublicKey'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lookupInstanceAddress_200_response'
          description: Found
        "400":
          content:
            application/problem+json:
              example:
                type: /v0/problems/invalid-request-parameter-format
                title: Invalid request parameter format
                status: 400
                detail: The request parameter is not valid
                errors:
                - detail: The public key abc123haha is not a valid base64 URL encoded
                    ed25519 public key
                  parameter: public_key
              schema:
                $ref: '#/components/schemas/InvalidRequestParameterError'
          description: Invalid public key
        "404":
          content:
            application/problem+json:
              example:
                type: /v0/problems/unknown-instance
                title: Specified instance has not been identified
                status: 409
                detail: The instance with key NyLVuL731FWGnQ4tD-RqWNcC4pFQ_eD0dDr2z0FHmxs
                  is not identified
                public_key: NyLVuL731FWGnQ4tD-RqWNcC4pFQ_eD0dDr2z0FHmxs
              schema:
                $ref: '#/components/schemas/UnknownInstanceError'
          description: Unknown instance
      summary: Get instance address by key
      tags:
      - instance
    post:
      description: Add an instance to this instance's database. This will make this
        instance tell the newly added instance to add itself.
      operationId: introduceInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/introduceInstance_request'
        description: The instance information
        required: true
      responses:
        "200":
          description: OK
        "400":
          $ref: '#/components/responses/InstanceIntroductionError'
      summary: Introduce an instance
      tags:
      - instance
  /federation/instance:
    delete:
      description: "When the private key gets compromised and you have the key, you\
        \ may \"revoke\" it. To do this, complete a challenge"
      operationId: markKeyAsCompromised
      parameters:
      - description: Your server public key
        explode: true
        in: query
        name: public_key
        required: true
        schema:
          $ref: '#/components/schemas/PublicKey'
        style: form
      - description: A challenge from `POST /federation/challenge`
        explode: true
        in: query
        name: challenge
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
        style: form
      - description: The signature of it
        explode: true
        in: query
        name: signature
        required: true
        schema:
          $ref: '#/components/schemas/Signature'
        style: form
      responses:
        "200":
          description: Key successfully marked as compromised
        "400":
          content:
            application/problem+json:
              example:
                type: /v0/problems/challenge-failed
                title: Failed to complete challenge
                challenge: 497dcba3-ecbf-4587-a2dd-5eb0665e6880
              schema:
                $ref: '#/components/schemas/markKeyAsCompromised_400_response'
          description: Error
      summary: Mark instance key as compromised
      tags:
      - federation
    get:
      description: Verify that the instance owns the ed25519 private key by providing
        a uuid challenge.
      operationId: verifyIdentity
      parameters:
      - description: A random uuid that will get signed
        explode: true
        in: query
        name: challenge
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyIdentity_200_response'
          description: OK
        "400":
          description: Input validation error
      summary: Verify the instance's ownership of the private key
      tags:
      - federation
    post:
      description: Request a new identity token by completing a challenge after being
        identified
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refreshToken_request'
        description: A challenge from `POST /federation/challenge` and your public
          key
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                identity_token: Pheikae3eeghahn8oruire this can literally be anything
                  <128 chars
              schema:
                $ref: '#/components/schemas/refreshToken_200_response'
          description: OK
        "400":
          content:
            application/problem+json:
              example:
                type: /v0/problems/invalid-challenge
                title: Challenge isn't valid
                challenge: 497dcba3-ecbf-4587-a2dd-5eb0665e6880
              schema:
                $ref: '#/components/schemas/refreshToken_400_response'
          description: Cannot refresh
      summary: Refresh identity token
      tags:
      - federation
  /federation/challenge:
    post:
      description: "Create a UUID challenge will be valid for 120 seconds and used\
        \ to validate that your own your private key.<br> To complete a challenge,\
        \ sign the `instance address to bytes` + `uuid bytes` and base64 the signature."
      operationId: getChallenge
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChallenge_201_response'
          description: Created
      summary: Create Challenge
      tags:
      - federation
  /federation/mailbox:
    post:
      description: Send mail to a plot this instance owns
      operationId: crossSend
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crossSend_request'
        description: Where to send the mail
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crossSend_200_response'
          description: OK
        "400":
          content:
            application/problem+json:
              example:
                type: /v0/problems/send/sender-not-registered
                title: Sender is not registered
                status: 400
                detail: The plot with id 51998 is not registered
                sender: 51998
              schema:
                $ref: '#/components/schemas/SendItemsError'
          description: Failed to send
      security:
      - Identity: []
      summary: Send mail to a plot
      tags:
      - federation
components:
  parameters:
    PlotId:
      description: "An id assigned by DiamondFire to identify a plot, this ID can\
        \ be used in /plot <plot_id>"
      explode: false
      in: path
      name: plot_id
      required: true
      schema:
        $ref: '#/components/schemas/PlotId'
      style: simple
    MessageId:
      description: The id to get messages after
      example: 3
      explode: true
      in: query
      name: msg_id
      required: true
      schema:
        $ref: '#/components/schemas/MailboxItemId'
      style: form
    MessageLimit:
      description: The max amount of messsages that can be returned
      example: 50
      explode: true
      in: query
      name: limit
      required: false
      schema:
        $ref: '#/components/schemas/MailboxItemId'
      style: form
  requestBodies:
    SendItems:
      content:
        application/json:
          example:
          - id: str
            val: Hello DFMailbox
          - id: vec
            x: 1
            "y": 2
            z: 3
          schema: {}
      description: "Items to send. The first item goes in first, last item goes in\
        \ last."
      required: true
  responses:
    SendItemsResult:
      content:
        application/json:
          example:
            msg_id: 5
          schema:
            $ref: '#/components/schemas/inline_object'
      description: Sent
    Unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      description: No authorization present
    ExpectedRegistered:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
      description: Expected any registered
    ExpectedUnregistered:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      description: Expected unregistered
    ExpectedHostAuth:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      description: Expected host auth
    InstanceIntroductionError:
      content:
        application/problem+json:
          example:
            type: /v0/problems/instance-introduction/mismatched-public-key
            title: Provided public key does not match server's public key
            status: 400
            detail: The public key 5I4Y7B0q_YWfJyU4kCm2DGaY7eWq3O-oF-N5gYNJthg does
              not match the server's public key
            expected_public_key: 5I4Y7B0q_YWfJyU4kCm2DGaY7eWq3O-oF-N5gYNJthg
            actual_public_key: NyLVuL731FWGnQ4tD-RqWNcC4pFQ_eD0dDr2z0FHmxs
          schema:
            $ref: '#/components/schemas/inline_object_5'
      description: Error introducing instance
  schemas:
    Plot:
      description: A known plot
      example:
        owner: owner
        public_key: public_key
        address: api2.dfmailbox.dev
        mailbox_msg_id: 42
        plot_id: 41808
      properties:
        plot_id:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
        owner:
          description: A UUID (universally unique identifier)
          type: string
        public_key:
          description: A base64 URL encoded ed25519 public key
          nullable: true
          type: string
        address:
          description: "An `Address`, if null, means it has the private key has been\
            \ compromised"
          example: api2.dfmailbox.dev
          nullable: true
          type: string
        mailbox_msg_id:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
      required:
      - address
      - mailbox_msg_id
      - owner
      - plot_id
      - public_key
    MailboxItem:
      description: An item in the mailbox
      properties:
        msg_id:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
        timestamp:
          description: A unix timestamp
          type: integer
        plot_origin:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
        val: {}
      required:
      - msg_id
      - plot_origin
      - timestamp
      - val
    FetchMailboxResult:
      description: A response for any request that returns mailbox items
      example:
        items:
        - msg_id: 33
          timestamp: 1749866772
          plot_origin: 43780
          val:
            id: dict
            val:
              name:
                id: str
                val: Notch
              msg:
                id: comp
                val: <b>Hello chat</b>
        - msg_id: 34
          timestamp: 1749866774
          plot_origin: 43780
          val:
            id: dict
            val:
              name:
                id: str
                val: Jeremaster
              msg:
                id: comp
                val: Wow this is a real message!
        until: 34
        current_id: 34
      properties:
        items: {}
        until:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
        current_id:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
      required:
      - current_id
      - items
      - until
    MailboxQueryOperation:
      description: An action to perform on a mailbox
      oneOf:
      - $ref: '#/components/schemas/MailboxQueryOperation_oneOf'
      - $ref: '#/components/schemas/MailboxQueryOperation_oneOf_1'
      - $ref: '#/components/schemas/MailboxQueryOperation_oneOf_2'
      - $ref: '#/components/schemas/MailboxQueryOperation_oneOf_3'
    MailboxQueryResponse:
      description: A response for any request that queries a mailbox
      oneOf:
      - $ref: '#/components/schemas/MailboxQueryResponse_oneOf'
      - $ref: '#/components/schemas/MailboxQueryResponse_oneOf'
      - $ref: '#/components/schemas/MailboxQueryResponse_oneOf_1'
      - $ref: '#/components/schemas/MailboxQueryResponse_oneOf_2'
      - $ref: '#/components/schemas/MailboxQueryResponse_oneOf_3'
    AddressKeyPair:
      description: Addess and key
      properties:
        address:
          description: An address pointing to another DFMailbox instance
          example: api.dfmailbox.dev
          type: string
        public_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
      required:
      - address
      - public_key
    NullableAddressKeyPair:
      description: Addess and key
      properties:
        address:
          description: An address pointing to another DFMailbox instance
          example: api.dfmailbox.dev
          type: string
        public_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
      required:
      - address
      - public_key
    InvalidRequestParameterError:
      description: Invalid request parameter
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        errors: {}
      required:
      - detail
      - status
      - title
      - type
    NoEffectUpdateError:
      description: Generic error for nothing happening
      properties:
        type: {}
        title: {}
        detail:
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
      required:
      - detail
      - status
      - title
      - type
    AlreadyExistsError:
      description: This problem occurs when the resource being created is found to
        already exist on the server.
      properties:
        type: {}
        title: {}
        detail:
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
      required:
      - detail
      - status
      - title
      - type
    ChallengeFailedError:
      description: Failed to complete challenge
      example:
        type: /v0/problems/challenge-failed
        title: Failed to complete challenge
        challenge: f4ba1dbd-dc5d-4ea8-8693-0f6c81b67248
        status: 400
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        challenge_bytes:
          description: Base64 representation of the challenge ((ascii address bytes)
            + (uuid bytes))
          type: string
      required:
      - status
      - title
      - type
    InvalidChallengeError:
      description: Invalid challenge
      example:
        type: /v0/problems/invalid-challenge
        title: Challenge isn't valid
        status: 400
        offending_challenge: 497dcba3-ecbf-4587-a2dd-5eb0665e6880
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        offending_challenge:
          description: A UUID (universally unique identifier)
          type: string
      required:
      - offending_challenge
      - status
      - title
      - type
    UnregisteredPlotError:
      description: Plot not registered
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        plot_id:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
      required:
      - detail
      - plot_id
      - status
      - title
      - type
    UnregisteredPlotsError:
      description: Some plots are not registered
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        plot_ids: {}
      required:
      - detail
      - plot_ids
      - status
      - title
      - type
    SendItemsError:
      description: An error emitted when a cross instance send fails. All of these
        errors are emitted in the perspective of this instance.
      oneOf:
      - $ref: '#/components/schemas/InstanceKeyCompromisedError'
      - $ref: '#/components/schemas/ChallengeFailedError'
      - $ref: '#/components/schemas/SendItemsError_oneOf'
      - $ref: '#/components/schemas/SendItemsError_oneOf'
      - $ref: '#/components/schemas/SendItemsError_oneOf_1'
      - $ref: '#/components/schemas/SendItemsError_oneOf_2'
      - $ref: '#/components/schemas/SendItemsError_oneOf_2'
      - $ref: '#/components/schemas/SendItemsError_oneOf_3'
    UnknownInstanceError:
      description: Unknown instance error
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        public_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
      required:
      - detail
      - public_key
      - status
      - title
      - type
    InstanceKeyCompromisedError:
      description: Instance key has been marked as compromised therefore being invalidated
      example:
        type: /v0/problems/instance-key-compromised
        title: Instance key has been compromised
        status: 409
        detail: The instance key has been compromised
        instance_key: NyLVuL731FWGnQ4tD-RqWNcC4pFQ_eD0dDr2z0FHmxs
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        instance_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
      required:
      - detail
      - instance_key
      - status
      - title
      - type
    PublicKey:
      description: A base64 URL encoded ed25519 public key
      example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
      type: string
    InstanceKey:
      description: An optional base64 URL encoded ed25519 public key
      nullable: true
      type: string
      example: null
    Signature:
      description: A base64 encoded ed25519 signature
      example: 7lv2/Z05t53d6LyjA+kXFO5gSIO308sgJ3pX5YAB2Kw9wXP6ZztXrYfkUVSRW0b+cIlPul7F5WQ9dPRPuYH3AA==
      type: string
    Address:
      description: An address pointing to another DFMailbox instance
      example: api.dfmailbox.dev
      type: string
    Uuid:
      description: A UUID (universally unique identifier)
      type: string
    PlotId:
      description: "An id assigned by DiamondFire to identify a plot, this ID can\
        \ be used in /plot <plot_id>"
      example: 41808
      format: int32
      type: integer
    MailboxItemId:
      description: A mailbox item id that refers to an item in any mailbox
      example: 42
      format: int64
      type: integer
    Json: {}
    Role:
      description: Possible authentication roles
      enum:
      - unregistered
      - host
      - registered
      type: string
    NonComplianceError:
      description: Shown when another instance isn't complying with the protocol
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
      required:
      - detail
      - status
      - title
      - type
    Status:
      description: HTTP status code
      example: 400
      type: integer
    InstanceUnreachableError:
      description: Instance cannot be reached
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        address:
          description: An address pointing to another DFMailbox instance
          example: api.dfmailbox.dev
          type: string
      required:
      - address
      - detail
      - status
      - title
      - type
    updateInstance_request:
      properties:
        instance:
          description: An optional base64 URL encoded ed25519 public key
          nullable: true
          type: string
          example: null
      required:
      - instance
    updateInstance_409_response:
      oneOf:
      - $ref: '#/components/schemas/UnregisteredPlotError'
      - $ref: '#/components/schemas/UnknownInstanceError'
      - $ref: '#/components/schemas/InstanceKeyCompromisedError'
    registerPlot_409_response:
      oneOf:
      - $ref: '#/components/schemas/UnknownInstanceError'
      - $ref: '#/components/schemas/InstanceKeyCompromisedError'
    createApiKey_200_response:
      description: Any random string of utf-8 characters
      example:
        api_key: api_key
      properties:
        api_key:
          type: string
      required:
      - api_key
    lookupInstanceAddress_200_response_oneOf:
      properties:
        instance:
          $ref: '#/components/schemas/NullableAddressKeyPair'
      required:
      - instance
    lookupInstanceAddress_200_response_oneOf_1:
      properties:
        instances: {}
      required:
      - instances
    lookupInstanceAddress_200_response:
      example:
        instance:
          address: api.dfmailbox.dev
          public_key: NyLVuL731FWGnQ4tD-RqWNcC4pFQ_eD0dDr2z0FHmxs
      oneOf:
      - $ref: '#/components/schemas/lookupInstanceAddress_200_response_oneOf'
      - $ref: '#/components/schemas/lookupInstanceAddress_200_response_oneOf_1'
    introduceInstance_request:
      properties:
        public_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
        address:
          description: An address pointing to another DFMailbox instance
          example: api.dfmailbox.dev
          type: string
        update:
          description: Whether to update the key or not
          example: false
          type: boolean
      required:
      - address
      - public_key
      exmaple:
        public_key: NyLVuL731FWGnQ4tD-RqWNcC4pFQ_eD0dDr2z0FHmxs
        address: api.dfmailbox.dev
    verifyIdentity_200_response:
      example:
        public_key: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
        address: api.dfmailbox.dev
        signature: 7lv2/Z05t53d6LyjA+kXFO5gSIO308sgJ3pX5YAB2Kw9wXP6ZztXrYfkUVSRW0b+cIlPul7F5WQ9dPRPuYH3AA==
      properties:
        public_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
        signature:
          description: A base64 encoded ed25519 signature
          example: 7lv2/Z05t53d6LyjA+kXFO5gSIO308sgJ3pX5YAB2Kw9wXP6ZztXrYfkUVSRW0b+cIlPul7F5WQ9dPRPuYH3AA==
          type: string
        address:
          description: An address pointing to another DFMailbox instance
          example: api.dfmailbox.dev
          type: string
      required:
      - address
      - public_key
      - signature
    refreshToken_request:
      properties:
        challenge:
          description: A UUID (universally unique identifier)
          type: string
        signature:
          description: A base64 encoded ed25519 signature
          example: 7lv2/Z05t53d6LyjA+kXFO5gSIO308sgJ3pX5YAB2Kw9wXP6ZztXrYfkUVSRW0b+cIlPul7F5WQ9dPRPuYH3AA==
          type: string
      required:
      - challenge
      - signature
    refreshToken_200_response:
      example:
        identity_token: lksbdgnabgabgfkaisgbewigewkgfdsgbasjbskjf
      properties:
        identity_token:
          example: lksbdgnabgabgfkaisgbewigewkgfdsgbasjbskjf
          type: string
      required:
      - identity_token
    refreshToken_400_response:
      oneOf:
      - $ref: '#/components/schemas/InvalidChallengeError'
      - $ref: '#/components/schemas/ChallengeFailedError'
      - $ref: '#/components/schemas/UnknownInstanceError'
    markKeyAsCompromised_400_response:
      oneOf:
      - $ref: '#/components/schemas/InvalidChallengeError'
      - $ref: '#/components/schemas/ChallengeFailedError'
    getChallenge_201_response:
      example:
        challenge: challenge
      properties:
        challenge:
          description: A UUID (universally unique identifier)
          type: string
      required:
      - challenge
    crossSend_request:
      properties:
        from:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
        to:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
        data: {}
      required:
      - data
      - from
      - to
    crossSend_200_response:
      example:
        msg_id: 42
      properties:
        msg_id:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
      required:
      - msg_id
    MailboxQueryOperation_oneOf:
      description: Imitates GET /plot/mailbox
      example:
        type: peek
        after: 32
        limit: null
      properties:
        type: {}
        after:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
        limit:
          nullable: true
          type: integer
      required:
      - after
      - limit
      - type
    MailboxQueryOperation_oneOf_1:
      description: Imitates DELETE /plot/mailbox
      example:
        type: peek_clean
        after: 32
      properties:
        type: {}
        after:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
      required:
      - after
      - type
    MailboxQueryOperation_oneOf_2:
      description: Imitates POST /plot/mailbox
      example:
        type: send
        to: 12345
        value:
        - id: str
          val: You know what is better than &fballs?
        - id: str
          val: It's <white>balls
      properties:
        type: {}
        value: {}
        to:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
      required:
      - to
      - type
      - value
    MailboxQueryOperation_oneOf_3:
      description: Imitates
      example:
        type: cleanup
        before_at: 4
      properties:
        type: {}
        before_at:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
      required:
      - before_at
      - type
    MailboxQueryResponse_oneOf:
      properties:
        type: {}
        result:
          $ref: '#/components/schemas/FetchMailboxResult'
      required:
      - result
      - type
    MailboxQueryResponse_oneOf_1:
      example:
        type: send
        msg_id: 35
      properties:
        type: {}
        msg_id:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
      required:
      - msg_id
      - type
    MailboxQueryResponse_oneOf_2:
      properties:
        type: {}
      required:
      - type
    MailboxQueryResponse_oneOf_3:
      properties:
        type: {}
        msg:
          $ref: '#/components/schemas/SendItemsError'
      required:
      - msg
      - type
    SendItemsError_oneOf:
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        sender:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
      required:
      - detail
      - sender
      - status
      - title
      - type
    SendItemsError_oneOf_1:
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        sender:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
        actual_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
        expected_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
      required:
      - actual_key
      - detail
      - expected_key
      - sender
      - status
      - title
      - type
    SendItemsError_oneOf_2:
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        receiver:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
      required:
      - detail
      - receiver
      - status
      - title
      - type
    SendItemsError_oneOf_3:
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        sender:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
        receiver:
          description: "An id assigned by DiamondFire to identify a plot, this ID\
            \ can be used in /plot <plot_id>"
          example: 41808
          format: int32
          type: integer
      required:
      - detail
      - sender
      - status
      - title
      - type
    inline_object:
      description: The message Id before the send
      example:
        msg_id: 42
      properties:
        msg_id:
          description: A mailbox item id that refers to an item in any mailbox
          example: 42
          format: int64
          type: integer
      required:
      - msg_id
    inline_object_1:
      example:
        type: https://tools.ietf.org/html/rfc9110#section-15.5.2
        title: Unauthorized
        status: 401
      properties:
        type: {}
        title: {}
        status: {}
      required:
      - status
      - title
      - type
    inline_object_2:
      example:
        type: /v0/problems/expected-role/any
        title: Expected any registered role
        status: 403
        expected:
        - host
        - registered
        received: unregistered
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        expected: {}
        received: {}
      required:
      - expected
      - received
      - status
      - title
      - type
    inline_object_3:
      example:
        type: /v0/problems/expected-role/unregistered
        title: Expected no registion
        status: 403
        expected:
        - unregistered
        received: host
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        expected: {}
        received:
          $ref: '#/components/schemas/Role'
      required:
      - expected
      - received
      - status
      - title
      - type
    inline_object_4:
      example:
        type: /v0/problems/expected-role/host
        title: Expected host auth
        status: 403
        expected:
        - host
        received: unregistered
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        expected: {}
        received:
          $ref: '#/components/schemas/Role'
      required:
      - expected
      - received
      - status
      - title
      - type
    inline_object_5_oneOf:
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        expected_address:
          description: An address pointing to another DFMailbox instance
          example: api.dfmailbox.dev
          type: string
        actual_address:
          description: An address pointing to another DFMailbox instance
          example: api.dfmailbox.dev
          type: string
      required:
      - actual_address
      - detail
      - expected_address
      - status
      - title
      - type
    inline_object_5_oneOf_1:
      properties:
        type: {}
        title: {}
        status:
          description: HTTP status code
          example: 400
          type: integer
        detail:
          type: string
        expected_public_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
        actual_public_key:
          description: A base64 URL encoded ed25519 public key
          example: 0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY
          type: string
      required:
      - actual_public_key
      - detail
      - expected_public_key
      - status
      - title
      - type
    inline_object_5:
      oneOf:
      - $ref: '#/components/schemas/NonComplianceError'
      - $ref: '#/components/schemas/InstanceUnreachableError'
      - $ref: '#/components/schemas/AlreadyExistsError'
      - $ref: '#/components/schemas/NoEffectUpdateError'
      - $ref: '#/components/schemas/inline_object_5_oneOf'
      - $ref: '#/components/schemas/inline_object_5_oneOf_1'
  securitySchemes:
    ApiKey:
      description: "An api key obtained through `POST /plot/api-key`. Once lost, it\
        \ cannot be recovered, only revoked."
      in: header
      name: x-api-key
      type: apiKey
    Identity:
      description: A key used by instances to communicate with one another
      in: header
      name: x-identity-token
      type: apiKey
    Plot:
      description: "Can only be used by DiamondFire IPs, found in the User-Agent header.\
        \ If you are a user of this API, you cannot use this authentication."
      in: header
      name: user-agent
      type: apiKey
