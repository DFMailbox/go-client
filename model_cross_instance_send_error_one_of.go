/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CrossInstanceSendErrorOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrossInstanceSendErrorOneOf{}

// CrossInstanceSendErrorOneOf struct for CrossInstanceSendErrorOneOf
type CrossInstanceSendErrorOneOf struct {
	Error interface{} `json:"error"`
	// A base64 URL encoded ed25519 public key
	ActualKey string `json:"actual_key"`
}

type _CrossInstanceSendErrorOneOf CrossInstanceSendErrorOneOf

// NewCrossInstanceSendErrorOneOf instantiates a new CrossInstanceSendErrorOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossInstanceSendErrorOneOf(error_ interface{}, actualKey string) *CrossInstanceSendErrorOneOf {
	this := CrossInstanceSendErrorOneOf{}
	this.Error = error_
	this.ActualKey = actualKey
	return &this
}

// NewCrossInstanceSendErrorOneOfWithDefaults instantiates a new CrossInstanceSendErrorOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossInstanceSendErrorOneOfWithDefaults() *CrossInstanceSendErrorOneOf {
	this := CrossInstanceSendErrorOneOf{}
	return &this
}

// GetError returns the Error field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CrossInstanceSendErrorOneOf) GetError() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CrossInstanceSendErrorOneOf) GetErrorOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *CrossInstanceSendErrorOneOf) SetError(v interface{}) {
	o.Error = v
}

// GetActualKey returns the ActualKey field value
func (o *CrossInstanceSendErrorOneOf) GetActualKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActualKey
}

// GetActualKeyOk returns a tuple with the ActualKey field value
// and a boolean to check if the value has been set.
func (o *CrossInstanceSendErrorOneOf) GetActualKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActualKey, true
}

// SetActualKey sets field value
func (o *CrossInstanceSendErrorOneOf) SetActualKey(v string) {
	o.ActualKey = v
}

func (o CrossInstanceSendErrorOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrossInstanceSendErrorOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	toSerialize["actual_key"] = o.ActualKey
	return toSerialize, nil
}

func (o *CrossInstanceSendErrorOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
		"actual_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrossInstanceSendErrorOneOf := _CrossInstanceSendErrorOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCrossInstanceSendErrorOneOf)

	if err != nil {
		return err
	}

	*o = CrossInstanceSendErrorOneOf(varCrossInstanceSendErrorOneOf)

	return err
}

type NullableCrossInstanceSendErrorOneOf struct {
	value *CrossInstanceSendErrorOneOf
	isSet bool
}

func (v NullableCrossInstanceSendErrorOneOf) Get() *CrossInstanceSendErrorOneOf {
	return v.value
}

func (v *NullableCrossInstanceSendErrorOneOf) Set(val *CrossInstanceSendErrorOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossInstanceSendErrorOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossInstanceSendErrorOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossInstanceSendErrorOneOf(val *CrossInstanceSendErrorOneOf) *NullableCrossInstanceSendErrorOneOf {
	return &NullableCrossInstanceSendErrorOneOf{value: val, isSet: true}
}

func (v NullableCrossInstanceSendErrorOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossInstanceSendErrorOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


