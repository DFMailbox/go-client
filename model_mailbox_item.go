/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MailboxItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailboxItem{}

// MailboxItem An item in the mailbox
type MailboxItem struct {
	// A mailbox item id that refers to an item in any mailbox
	MsgId int64 `json:"msg_id"`
	// A unix timestamp
	Timestamp int32 `json:"timestamp"`
	// An id assigned by DiamondFire to identify a plot, this ID can be used in /plot <plot_id>
	PlotOrigin int32 `json:"plot_origin"`
	Val interface{} `json:"val"`
}

type _MailboxItem MailboxItem

// NewMailboxItem instantiates a new MailboxItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailboxItem(msgId int64, timestamp int32, plotOrigin int32, val interface{}) *MailboxItem {
	this := MailboxItem{}
	this.MsgId = msgId
	this.Timestamp = timestamp
	this.PlotOrigin = plotOrigin
	this.Val = val
	return &this
}

// NewMailboxItemWithDefaults instantiates a new MailboxItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailboxItemWithDefaults() *MailboxItem {
	this := MailboxItem{}
	return &this
}

// GetMsgId returns the MsgId field value
func (o *MailboxItem) GetMsgId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MsgId
}

// GetMsgIdOk returns a tuple with the MsgId field value
// and a boolean to check if the value has been set.
func (o *MailboxItem) GetMsgIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MsgId, true
}

// SetMsgId sets field value
func (o *MailboxItem) SetMsgId(v int64) {
	o.MsgId = v
}

// GetTimestamp returns the Timestamp field value
func (o *MailboxItem) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *MailboxItem) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *MailboxItem) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetPlotOrigin returns the PlotOrigin field value
func (o *MailboxItem) GetPlotOrigin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlotOrigin
}

// GetPlotOriginOk returns a tuple with the PlotOrigin field value
// and a boolean to check if the value has been set.
func (o *MailboxItem) GetPlotOriginOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlotOrigin, true
}

// SetPlotOrigin sets field value
func (o *MailboxItem) SetPlotOrigin(v int32) {
	o.PlotOrigin = v
}

// GetVal returns the Val field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MailboxItem) GetVal() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Val
}

// GetValOk returns a tuple with the Val field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailboxItem) GetValOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Val) {
		return nil, false
	}
	return &o.Val, true
}

// SetVal sets field value
func (o *MailboxItem) SetVal(v interface{}) {
	o.Val = v
}

func (o MailboxItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailboxItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["msg_id"] = o.MsgId
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["plot_origin"] = o.PlotOrigin
	if o.Val != nil {
		toSerialize["val"] = o.Val
	}
	return toSerialize, nil
}

func (o *MailboxItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"msg_id",
		"timestamp",
		"plot_origin",
		"val",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMailboxItem := _MailboxItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMailboxItem)

	if err != nil {
		return err
	}

	*o = MailboxItem(varMailboxItem)

	return err
}

type NullableMailboxItem struct {
	value *MailboxItem
	isSet bool
}

func (v NullableMailboxItem) Get() *MailboxItem {
	return v.value
}

func (v *NullableMailboxItem) Set(val *MailboxItem) {
	v.value = val
	v.isSet = true
}

func (v NullableMailboxItem) IsSet() bool {
	return v.isSet
}

func (v *NullableMailboxItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailboxItem(val *MailboxItem) *NullableMailboxItem {
	return &NullableMailboxItem{value: val, isSet: true}
}

func (v NullableMailboxItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailboxItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


