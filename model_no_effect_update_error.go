/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NoEffectUpdateError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoEffectUpdateError{}

// NoEffectUpdateError Generic error for nothing happening
type NoEffectUpdateError struct {
	Type interface{} `json:"type"`
	Title interface{} `json:"title"`
	Detail string `json:"detail"`
	// HTTP status code
	Status int32 `json:"status"`
}

type _NoEffectUpdateError NoEffectUpdateError

// NewNoEffectUpdateError instantiates a new NoEffectUpdateError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoEffectUpdateError(type_ interface{}, title interface{}, detail string, status int32) *NoEffectUpdateError {
	this := NoEffectUpdateError{}
	this.Type = type_
	this.Title = title
	this.Detail = detail
	this.Status = status
	return &this
}

// NewNoEffectUpdateErrorWithDefaults instantiates a new NoEffectUpdateError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoEffectUpdateErrorWithDefaults() *NoEffectUpdateError {
	this := NoEffectUpdateError{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *NoEffectUpdateError) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoEffectUpdateError) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NoEffectUpdateError) SetType(v interface{}) {
	o.Type = v
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *NoEffectUpdateError) GetTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoEffectUpdateError) GetTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *NoEffectUpdateError) SetTitle(v interface{}) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *NoEffectUpdateError) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *NoEffectUpdateError) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *NoEffectUpdateError) SetDetail(v string) {
	o.Detail = v
}

// GetStatus returns the Status field value
func (o *NoEffectUpdateError) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NoEffectUpdateError) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NoEffectUpdateError) SetStatus(v int32) {
	o.Status = v
}

func (o NoEffectUpdateError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoEffectUpdateError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	toSerialize["detail"] = o.Detail
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *NoEffectUpdateError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"detail",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoEffectUpdateError := _NoEffectUpdateError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoEffectUpdateError)

	if err != nil {
		return err
	}

	*o = NoEffectUpdateError(varNoEffectUpdateError)

	return err
}

type NullableNoEffectUpdateError struct {
	value *NoEffectUpdateError
	isSet bool
}

func (v NullableNoEffectUpdateError) Get() *NoEffectUpdateError {
	return v.value
}

func (v *NullableNoEffectUpdateError) Set(val *NoEffectUpdateError) {
	v.value = val
	v.isSet = true
}

func (v NullableNoEffectUpdateError) IsSet() bool {
	return v.isSet
}

func (v *NullableNoEffectUpdateError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoEffectUpdateError(val *NoEffectUpdateError) *NullableNoEffectUpdateError {
	return &NullableNoEffectUpdateError{value: val, isSet: true}
}

func (v NullableNoEffectUpdateError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoEffectUpdateError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


