/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InvalidChallengeError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidChallengeError{}

// InvalidChallengeError Invalid challenge
type InvalidChallengeError struct {
	Type interface{} `json:"type"`
	Title interface{} `json:"title"`
	// HTTP status code
	Status int32 `json:"status"`
	// A UUID (universally unique identifier)
	OffendingChallenge string `json:"offending_challenge"`
}

type _InvalidChallengeError InvalidChallengeError

// NewInvalidChallengeError instantiates a new InvalidChallengeError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidChallengeError(type_ interface{}, title interface{}, status int32, offendingChallenge string) *InvalidChallengeError {
	this := InvalidChallengeError{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.OffendingChallenge = offendingChallenge
	return &this
}

// NewInvalidChallengeErrorWithDefaults instantiates a new InvalidChallengeError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidChallengeErrorWithDefaults() *InvalidChallengeError {
	this := InvalidChallengeError{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InvalidChallengeError) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidChallengeError) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InvalidChallengeError) SetType(v interface{}) {
	o.Type = v
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InvalidChallengeError) GetTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidChallengeError) GetTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InvalidChallengeError) SetTitle(v interface{}) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *InvalidChallengeError) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InvalidChallengeError) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InvalidChallengeError) SetStatus(v int32) {
	o.Status = v
}

// GetOffendingChallenge returns the OffendingChallenge field value
func (o *InvalidChallengeError) GetOffendingChallenge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OffendingChallenge
}

// GetOffendingChallengeOk returns a tuple with the OffendingChallenge field value
// and a boolean to check if the value has been set.
func (o *InvalidChallengeError) GetOffendingChallengeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OffendingChallenge, true
}

// SetOffendingChallenge sets field value
func (o *InvalidChallengeError) SetOffendingChallenge(v string) {
	o.OffendingChallenge = v
}

func (o InvalidChallengeError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidChallengeError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	toSerialize["status"] = o.Status
	toSerialize["offending_challenge"] = o.OffendingChallenge
	return toSerialize, nil
}

func (o *InvalidChallengeError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"status",
		"offending_challenge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvalidChallengeError := _InvalidChallengeError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvalidChallengeError)

	if err != nil {
		return err
	}

	*o = InvalidChallengeError(varInvalidChallengeError)

	return err
}

type NullableInvalidChallengeError struct {
	value *InvalidChallengeError
	isSet bool
}

func (v NullableInvalidChallengeError) Get() *InvalidChallengeError {
	return v.value
}

func (v *NullableInvalidChallengeError) Set(val *InvalidChallengeError) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidChallengeError) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidChallengeError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidChallengeError(val *InvalidChallengeError) *NullableInvalidChallengeError {
	return &NullableInvalidChallengeError{value: val, isSet: true}
}

func (v NullableInvalidChallengeError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidChallengeError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


