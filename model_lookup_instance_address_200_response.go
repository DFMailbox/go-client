/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LookupInstanceAddress200Response - struct for LookupInstanceAddress200Response
type LookupInstanceAddress200Response struct {
	LookupInstanceAddress200ResponseOneOf *LookupInstanceAddress200ResponseOneOf
	LookupInstanceAddress200ResponseOneOf1 *LookupInstanceAddress200ResponseOneOf1
}

// LookupInstanceAddress200ResponseOneOfAsLookupInstanceAddress200Response is a convenience function that returns LookupInstanceAddress200ResponseOneOf wrapped in LookupInstanceAddress200Response
func LookupInstanceAddress200ResponseOneOfAsLookupInstanceAddress200Response(v *LookupInstanceAddress200ResponseOneOf) LookupInstanceAddress200Response {
	return LookupInstanceAddress200Response{
		LookupInstanceAddress200ResponseOneOf: v,
	}
}

// LookupInstanceAddress200ResponseOneOf1AsLookupInstanceAddress200Response is a convenience function that returns LookupInstanceAddress200ResponseOneOf1 wrapped in LookupInstanceAddress200Response
func LookupInstanceAddress200ResponseOneOf1AsLookupInstanceAddress200Response(v *LookupInstanceAddress200ResponseOneOf1) LookupInstanceAddress200Response {
	return LookupInstanceAddress200Response{
		LookupInstanceAddress200ResponseOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LookupInstanceAddress200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LookupInstanceAddress200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.LookupInstanceAddress200ResponseOneOf)
	if err == nil {
		jsonLookupInstanceAddress200ResponseOneOf, _ := json.Marshal(dst.LookupInstanceAddress200ResponseOneOf)
		if string(jsonLookupInstanceAddress200ResponseOneOf) == "{}" { // empty struct
			dst.LookupInstanceAddress200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.LookupInstanceAddress200ResponseOneOf); err != nil {
				dst.LookupInstanceAddress200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.LookupInstanceAddress200ResponseOneOf = nil
	}

	// try to unmarshal data into LookupInstanceAddress200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.LookupInstanceAddress200ResponseOneOf1)
	if err == nil {
		jsonLookupInstanceAddress200ResponseOneOf1, _ := json.Marshal(dst.LookupInstanceAddress200ResponseOneOf1)
		if string(jsonLookupInstanceAddress200ResponseOneOf1) == "{}" { // empty struct
			dst.LookupInstanceAddress200ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.LookupInstanceAddress200ResponseOneOf1); err != nil {
				dst.LookupInstanceAddress200ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.LookupInstanceAddress200ResponseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LookupInstanceAddress200ResponseOneOf = nil
		dst.LookupInstanceAddress200ResponseOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LookupInstanceAddress200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LookupInstanceAddress200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LookupInstanceAddress200Response) MarshalJSON() ([]byte, error) {
	if src.LookupInstanceAddress200ResponseOneOf != nil {
		return json.Marshal(&src.LookupInstanceAddress200ResponseOneOf)
	}

	if src.LookupInstanceAddress200ResponseOneOf1 != nil {
		return json.Marshal(&src.LookupInstanceAddress200ResponseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LookupInstanceAddress200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LookupInstanceAddress200ResponseOneOf != nil {
		return obj.LookupInstanceAddress200ResponseOneOf
	}

	if obj.LookupInstanceAddress200ResponseOneOf1 != nil {
		return obj.LookupInstanceAddress200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LookupInstanceAddress200Response) GetActualInstanceValue() (interface{}) {
	if obj.LookupInstanceAddress200ResponseOneOf != nil {
		return *obj.LookupInstanceAddress200ResponseOneOf
	}

	if obj.LookupInstanceAddress200ResponseOneOf1 != nil {
		return *obj.LookupInstanceAddress200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableLookupInstanceAddress200Response struct {
	value *LookupInstanceAddress200Response
	isSet bool
}

func (v NullableLookupInstanceAddress200Response) Get() *LookupInstanceAddress200Response {
	return v.value
}

func (v *NullableLookupInstanceAddress200Response) Set(val *LookupInstanceAddress200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupInstanceAddress200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupInstanceAddress200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupInstanceAddress200Response(val *LookupInstanceAddress200Response) *NullableLookupInstanceAddress200Response {
	return &NullableLookupInstanceAddress200Response{value: val, isSet: true}
}

func (v NullableLookupInstanceAddress200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupInstanceAddress200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


