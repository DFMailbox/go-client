/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CrossSendRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrossSendRequest{}

// CrossSendRequest struct for CrossSendRequest
type CrossSendRequest struct {
	// An id assigned by DiamondFire to identify a plot, this ID can be used in /plot <plot_id>
	From int32 `json:"from"`
	// An id assigned by DiamondFire to identify a plot, this ID can be used in /plot <plot_id>
	To int32 `json:"to"`
	Data interface{} `json:"data"`
}

type _CrossSendRequest CrossSendRequest

// NewCrossSendRequest instantiates a new CrossSendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossSendRequest(from int32, to int32, data interface{}) *CrossSendRequest {
	this := CrossSendRequest{}
	this.From = from
	this.To = to
	this.Data = data
	return &this
}

// NewCrossSendRequestWithDefaults instantiates a new CrossSendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossSendRequestWithDefaults() *CrossSendRequest {
	this := CrossSendRequest{}
	return &this
}

// GetFrom returns the From field value
func (o *CrossSendRequest) GetFrom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *CrossSendRequest) GetFromOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *CrossSendRequest) SetFrom(v int32) {
	o.From = v
}

// GetTo returns the To field value
func (o *CrossSendRequest) GetTo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *CrossSendRequest) GetToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *CrossSendRequest) SetTo(v int32) {
	o.To = v
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CrossSendRequest) GetData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CrossSendRequest) GetDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CrossSendRequest) SetData(v interface{}) {
	o.Data = v
}

func (o CrossSendRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrossSendRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *CrossSendRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrossSendRequest := _CrossSendRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCrossSendRequest)

	if err != nil {
		return err
	}

	*o = CrossSendRequest(varCrossSendRequest)

	return err
}

type NullableCrossSendRequest struct {
	value *CrossSendRequest
	isSet bool
}

func (v NullableCrossSendRequest) Get() *CrossSendRequest {
	return v.value
}

func (v *NullableCrossSendRequest) Set(val *CrossSendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossSendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossSendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossSendRequest(val *CrossSendRequest) *NullableCrossSendRequest {
	return &NullableCrossSendRequest{value: val, isSet: true}
}

func (v NullableCrossSendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossSendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


