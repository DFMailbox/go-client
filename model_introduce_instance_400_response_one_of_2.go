/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IntroduceInstance400ResponseOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntroduceInstance400ResponseOneOf2{}

// IntroduceInstance400ResponseOneOf2 struct for IntroduceInstance400ResponseOneOf2
type IntroduceInstance400ResponseOneOf2 struct {
	Error interface{} `json:"error"`
	// A base64 URL encoded ed25519 public key
	ExpectedKey string `json:"expected_key"`
}

type _IntroduceInstance400ResponseOneOf2 IntroduceInstance400ResponseOneOf2

// NewIntroduceInstance400ResponseOneOf2 instantiates a new IntroduceInstance400ResponseOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntroduceInstance400ResponseOneOf2(error_ interface{}, expectedKey string) *IntroduceInstance400ResponseOneOf2 {
	this := IntroduceInstance400ResponseOneOf2{}
	this.Error = error_
	this.ExpectedKey = expectedKey
	return &this
}

// NewIntroduceInstance400ResponseOneOf2WithDefaults instantiates a new IntroduceInstance400ResponseOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntroduceInstance400ResponseOneOf2WithDefaults() *IntroduceInstance400ResponseOneOf2 {
	this := IntroduceInstance400ResponseOneOf2{}
	return &this
}

// GetError returns the Error field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *IntroduceInstance400ResponseOneOf2) GetError() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntroduceInstance400ResponseOneOf2) GetErrorOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *IntroduceInstance400ResponseOneOf2) SetError(v interface{}) {
	o.Error = v
}

// GetExpectedKey returns the ExpectedKey field value
func (o *IntroduceInstance400ResponseOneOf2) GetExpectedKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpectedKey
}

// GetExpectedKeyOk returns a tuple with the ExpectedKey field value
// and a boolean to check if the value has been set.
func (o *IntroduceInstance400ResponseOneOf2) GetExpectedKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpectedKey, true
}

// SetExpectedKey sets field value
func (o *IntroduceInstance400ResponseOneOf2) SetExpectedKey(v string) {
	o.ExpectedKey = v
}

func (o IntroduceInstance400ResponseOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntroduceInstance400ResponseOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	toSerialize["expected_key"] = o.ExpectedKey
	return toSerialize, nil
}

func (o *IntroduceInstance400ResponseOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
		"expected_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntroduceInstance400ResponseOneOf2 := _IntroduceInstance400ResponseOneOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntroduceInstance400ResponseOneOf2)

	if err != nil {
		return err
	}

	*o = IntroduceInstance400ResponseOneOf2(varIntroduceInstance400ResponseOneOf2)

	return err
}

type NullableIntroduceInstance400ResponseOneOf2 struct {
	value *IntroduceInstance400ResponseOneOf2
	isSet bool
}

func (v NullableIntroduceInstance400ResponseOneOf2) Get() *IntroduceInstance400ResponseOneOf2 {
	return v.value
}

func (v *NullableIntroduceInstance400ResponseOneOf2) Set(val *IntroduceInstance400ResponseOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableIntroduceInstance400ResponseOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableIntroduceInstance400ResponseOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntroduceInstance400ResponseOneOf2(val *IntroduceInstance400ResponseOneOf2) *NullableIntroduceInstance400ResponseOneOf2 {
	return &NullableIntroduceInstance400ResponseOneOf2{value: val, isSet: true}
}

func (v NullableIntroduceInstance400ResponseOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntroduceInstance400ResponseOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


