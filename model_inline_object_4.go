/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InlineObject4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject4{}

// InlineObject4 struct for InlineObject4
type InlineObject4 struct {
	Type interface{} `json:"type"`
	Title interface{} `json:"title"`
	// HTTP status code
	Status int32 `json:"status"`
	Expected interface{} `json:"expected"`
	Received Role `json:"received"`
}

type _InlineObject4 InlineObject4

// NewInlineObject4 instantiates a new InlineObject4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject4(type_ interface{}, title interface{}, status int32, expected interface{}, received Role) *InlineObject4 {
	this := InlineObject4{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.Expected = expected
	this.Received = received
	return &this
}

// NewInlineObject4WithDefaults instantiates a new InlineObject4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject4WithDefaults() *InlineObject4 {
	this := InlineObject4{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InlineObject4) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject4) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InlineObject4) SetType(v interface{}) {
	o.Type = v
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InlineObject4) GetTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject4) GetTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InlineObject4) SetTitle(v interface{}) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *InlineObject4) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InlineObject4) SetStatus(v int32) {
	o.Status = v
}

// GetExpected returns the Expected field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InlineObject4) GetExpected() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Expected
}

// GetExpectedOk returns a tuple with the Expected field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject4) GetExpectedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Expected) {
		return nil, false
	}
	return &o.Expected, true
}

// SetExpected sets field value
func (o *InlineObject4) SetExpected(v interface{}) {
	o.Expected = v
}

// GetReceived returns the Received field value
func (o *InlineObject4) GetReceived() Role {
	if o == nil {
		var ret Role
		return ret
	}

	return o.Received
}

// GetReceivedOk returns a tuple with the Received field value
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetReceivedOk() (*Role, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Received, true
}

// SetReceived sets field value
func (o *InlineObject4) SetReceived(v Role) {
	o.Received = v
}

func (o InlineObject4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	toSerialize["status"] = o.Status
	if o.Expected != nil {
		toSerialize["expected"] = o.Expected
	}
	toSerialize["received"] = o.Received
	return toSerialize, nil
}

func (o *InlineObject4) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"status",
		"expected",
		"received",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInlineObject4 := _InlineObject4{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInlineObject4)

	if err != nil {
		return err
	}

	*o = InlineObject4(varInlineObject4)

	return err
}

type NullableInlineObject4 struct {
	value *InlineObject4
	isSet bool
}

func (v NullableInlineObject4) Get() *InlineObject4 {
	return v.value
}

func (v *NullableInlineObject4) Set(val *InlineObject4) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject4) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject4(val *InlineObject4) *NullableInlineObject4 {
	return &NullableInlineObject4{value: val, isSet: true}
}

func (v NullableInlineObject4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


