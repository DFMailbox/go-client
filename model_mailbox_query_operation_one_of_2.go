/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MailboxQueryOperationOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailboxQueryOperationOneOf2{}

// MailboxQueryOperationOneOf2 Imitates POST /plot/mailbox
type MailboxQueryOperationOneOf2 struct {
	Type interface{} `json:"type"`
	Value interface{} `json:"value"`
	// An id assigned by DiamondFire to identify a plot, this ID can be used in /plot <plot_id>
	To int32 `json:"to"`
}

type _MailboxQueryOperationOneOf2 MailboxQueryOperationOneOf2

// NewMailboxQueryOperationOneOf2 instantiates a new MailboxQueryOperationOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailboxQueryOperationOneOf2(type_ interface{}, value interface{}, to int32) *MailboxQueryOperationOneOf2 {
	this := MailboxQueryOperationOneOf2{}
	this.Type = type_
	this.Value = value
	this.To = to
	return &this
}

// NewMailboxQueryOperationOneOf2WithDefaults instantiates a new MailboxQueryOperationOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailboxQueryOperationOneOf2WithDefaults() *MailboxQueryOperationOneOf2 {
	this := MailboxQueryOperationOneOf2{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MailboxQueryOperationOneOf2) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailboxQueryOperationOneOf2) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MailboxQueryOperationOneOf2) SetType(v interface{}) {
	o.Type = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MailboxQueryOperationOneOf2) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailboxQueryOperationOneOf2) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MailboxQueryOperationOneOf2) SetValue(v interface{}) {
	o.Value = v
}

// GetTo returns the To field value
func (o *MailboxQueryOperationOneOf2) GetTo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *MailboxQueryOperationOneOf2) GetToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *MailboxQueryOperationOneOf2) SetTo(v int32) {
	o.To = v
}

func (o MailboxQueryOperationOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailboxQueryOperationOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	toSerialize["to"] = o.To
	return toSerialize, nil
}

func (o *MailboxQueryOperationOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMailboxQueryOperationOneOf2 := _MailboxQueryOperationOneOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMailboxQueryOperationOneOf2)

	if err != nil {
		return err
	}

	*o = MailboxQueryOperationOneOf2(varMailboxQueryOperationOneOf2)

	return err
}

type NullableMailboxQueryOperationOneOf2 struct {
	value *MailboxQueryOperationOneOf2
	isSet bool
}

func (v NullableMailboxQueryOperationOneOf2) Get() *MailboxQueryOperationOneOf2 {
	return v.value
}

func (v *NullableMailboxQueryOperationOneOf2) Set(val *MailboxQueryOperationOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableMailboxQueryOperationOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableMailboxQueryOperationOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailboxQueryOperationOneOf2(val *MailboxQueryOperationOneOf2) *NullableMailboxQueryOperationOneOf2 {
	return &NullableMailboxQueryOperationOneOf2{value: val, isSet: true}
}

func (v NullableMailboxQueryOperationOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailboxQueryOperationOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


