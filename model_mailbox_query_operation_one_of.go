/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MailboxQueryOperationOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailboxQueryOperationOneOf{}

// MailboxQueryOperationOneOf Imitates GET /plot/mailbox
type MailboxQueryOperationOneOf struct {
	Type interface{} `json:"type"`
	// A mailbox item id that refers to an item in any mailbox
	After int64 `json:"after"`
	Limit NullableInt32 `json:"limit"`
}

type _MailboxQueryOperationOneOf MailboxQueryOperationOneOf

// NewMailboxQueryOperationOneOf instantiates a new MailboxQueryOperationOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailboxQueryOperationOneOf(type_ interface{}, after int64, limit NullableInt32) *MailboxQueryOperationOneOf {
	this := MailboxQueryOperationOneOf{}
	this.Type = type_
	this.After = after
	this.Limit = limit
	return &this
}

// NewMailboxQueryOperationOneOfWithDefaults instantiates a new MailboxQueryOperationOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailboxQueryOperationOneOfWithDefaults() *MailboxQueryOperationOneOf {
	this := MailboxQueryOperationOneOf{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MailboxQueryOperationOneOf) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailboxQueryOperationOneOf) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MailboxQueryOperationOneOf) SetType(v interface{}) {
	o.Type = v
}

// GetAfter returns the After field value
func (o *MailboxQueryOperationOneOf) GetAfter() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *MailboxQueryOperationOneOf) GetAfterOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *MailboxQueryOperationOneOf) SetAfter(v int64) {
	o.After = v
}

// GetLimit returns the Limit field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *MailboxQueryOperationOneOf) GetLimit() int32 {
	if o == nil || o.Limit.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailboxQueryOperationOneOf) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// SetLimit sets field value
func (o *MailboxQueryOperationOneOf) SetLimit(v int32) {
	o.Limit.Set(&v)
}

func (o MailboxQueryOperationOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailboxQueryOperationOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	toSerialize["after"] = o.After
	toSerialize["limit"] = o.Limit.Get()
	return toSerialize, nil
}

func (o *MailboxQueryOperationOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"after",
		"limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMailboxQueryOperationOneOf := _MailboxQueryOperationOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMailboxQueryOperationOneOf)

	if err != nil {
		return err
	}

	*o = MailboxQueryOperationOneOf(varMailboxQueryOperationOneOf)

	return err
}

type NullableMailboxQueryOperationOneOf struct {
	value *MailboxQueryOperationOneOf
	isSet bool
}

func (v NullableMailboxQueryOperationOneOf) Get() *MailboxQueryOperationOneOf {
	return v.value
}

func (v *NullableMailboxQueryOperationOneOf) Set(val *MailboxQueryOperationOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMailboxQueryOperationOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMailboxQueryOperationOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailboxQueryOperationOneOf(val *MailboxQueryOperationOneOf) *NullableMailboxQueryOperationOneOf {
	return &NullableMailboxQueryOperationOneOf{value: val, isSet: true}
}

func (v NullableMailboxQueryOperationOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailboxQueryOperationOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


