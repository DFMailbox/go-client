/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LookupInstanceAddress200ResponseOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LookupInstanceAddress200ResponseOneOf{}

// LookupInstanceAddress200ResponseOneOf struct for LookupInstanceAddress200ResponseOneOf
type LookupInstanceAddress200ResponseOneOf struct {
	Instance MaybeAddressKeyPair `json:"instance"`
}

type _LookupInstanceAddress200ResponseOneOf LookupInstanceAddress200ResponseOneOf

// NewLookupInstanceAddress200ResponseOneOf instantiates a new LookupInstanceAddress200ResponseOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupInstanceAddress200ResponseOneOf(instance MaybeAddressKeyPair) *LookupInstanceAddress200ResponseOneOf {
	this := LookupInstanceAddress200ResponseOneOf{}
	this.Instance = instance
	return &this
}

// NewLookupInstanceAddress200ResponseOneOfWithDefaults instantiates a new LookupInstanceAddress200ResponseOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupInstanceAddress200ResponseOneOfWithDefaults() *LookupInstanceAddress200ResponseOneOf {
	this := LookupInstanceAddress200ResponseOneOf{}
	return &this
}

// GetInstance returns the Instance field value
func (o *LookupInstanceAddress200ResponseOneOf) GetInstance() MaybeAddressKeyPair {
	if o == nil {
		var ret MaybeAddressKeyPair
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *LookupInstanceAddress200ResponseOneOf) GetInstanceOk() (*MaybeAddressKeyPair, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *LookupInstanceAddress200ResponseOneOf) SetInstance(v MaybeAddressKeyPair) {
	o.Instance = v
}

func (o LookupInstanceAddress200ResponseOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LookupInstanceAddress200ResponseOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instance"] = o.Instance
	return toSerialize, nil
}

func (o *LookupInstanceAddress200ResponseOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLookupInstanceAddress200ResponseOneOf := _LookupInstanceAddress200ResponseOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLookupInstanceAddress200ResponseOneOf)

	if err != nil {
		return err
	}

	*o = LookupInstanceAddress200ResponseOneOf(varLookupInstanceAddress200ResponseOneOf)

	return err
}

type NullableLookupInstanceAddress200ResponseOneOf struct {
	value *LookupInstanceAddress200ResponseOneOf
	isSet bool
}

func (v NullableLookupInstanceAddress200ResponseOneOf) Get() *LookupInstanceAddress200ResponseOneOf {
	return v.value
}

func (v *NullableLookupInstanceAddress200ResponseOneOf) Set(val *LookupInstanceAddress200ResponseOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupInstanceAddress200ResponseOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupInstanceAddress200ResponseOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupInstanceAddress200ResponseOneOf(val *LookupInstanceAddress200ResponseOneOf) *NullableLookupInstanceAddress200ResponseOneOf {
	return &NullableLookupInstanceAddress200ResponseOneOf{value: val, isSet: true}
}

func (v NullableLookupInstanceAddress200ResponseOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupInstanceAddress200ResponseOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


