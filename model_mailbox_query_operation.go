/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MailboxQueryOperation - An action to perform on a mailbox
type MailboxQueryOperation struct {
	MailboxQueryOperationOneOf *MailboxQueryOperationOneOf
	MailboxQueryOperationOneOf1 *MailboxQueryOperationOneOf1
	MailboxQueryOperationOneOf2 *MailboxQueryOperationOneOf2
	MailboxQueryOperationOneOf3 *MailboxQueryOperationOneOf3
}

// MailboxQueryOperationOneOfAsMailboxQueryOperation is a convenience function that returns MailboxQueryOperationOneOf wrapped in MailboxQueryOperation
func MailboxQueryOperationOneOfAsMailboxQueryOperation(v *MailboxQueryOperationOneOf) MailboxQueryOperation {
	return MailboxQueryOperation{
		MailboxQueryOperationOneOf: v,
	}
}

// MailboxQueryOperationOneOf1AsMailboxQueryOperation is a convenience function that returns MailboxQueryOperationOneOf1 wrapped in MailboxQueryOperation
func MailboxQueryOperationOneOf1AsMailboxQueryOperation(v *MailboxQueryOperationOneOf1) MailboxQueryOperation {
	return MailboxQueryOperation{
		MailboxQueryOperationOneOf1: v,
	}
}

// MailboxQueryOperationOneOf2AsMailboxQueryOperation is a convenience function that returns MailboxQueryOperationOneOf2 wrapped in MailboxQueryOperation
func MailboxQueryOperationOneOf2AsMailboxQueryOperation(v *MailboxQueryOperationOneOf2) MailboxQueryOperation {
	return MailboxQueryOperation{
		MailboxQueryOperationOneOf2: v,
	}
}

// MailboxQueryOperationOneOf3AsMailboxQueryOperation is a convenience function that returns MailboxQueryOperationOneOf3 wrapped in MailboxQueryOperation
func MailboxQueryOperationOneOf3AsMailboxQueryOperation(v *MailboxQueryOperationOneOf3) MailboxQueryOperation {
	return MailboxQueryOperation{
		MailboxQueryOperationOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MailboxQueryOperation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MailboxQueryOperationOneOf
	err = newStrictDecoder(data).Decode(&dst.MailboxQueryOperationOneOf)
	if err == nil {
		jsonMailboxQueryOperationOneOf, _ := json.Marshal(dst.MailboxQueryOperationOneOf)
		if string(jsonMailboxQueryOperationOneOf) == "{}" { // empty struct
			dst.MailboxQueryOperationOneOf = nil
		} else {
			if err = validator.Validate(dst.MailboxQueryOperationOneOf); err != nil {
				dst.MailboxQueryOperationOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MailboxQueryOperationOneOf = nil
	}

	// try to unmarshal data into MailboxQueryOperationOneOf1
	err = newStrictDecoder(data).Decode(&dst.MailboxQueryOperationOneOf1)
	if err == nil {
		jsonMailboxQueryOperationOneOf1, _ := json.Marshal(dst.MailboxQueryOperationOneOf1)
		if string(jsonMailboxQueryOperationOneOf1) == "{}" { // empty struct
			dst.MailboxQueryOperationOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MailboxQueryOperationOneOf1); err != nil {
				dst.MailboxQueryOperationOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MailboxQueryOperationOneOf1 = nil
	}

	// try to unmarshal data into MailboxQueryOperationOneOf2
	err = newStrictDecoder(data).Decode(&dst.MailboxQueryOperationOneOf2)
	if err == nil {
		jsonMailboxQueryOperationOneOf2, _ := json.Marshal(dst.MailboxQueryOperationOneOf2)
		if string(jsonMailboxQueryOperationOneOf2) == "{}" { // empty struct
			dst.MailboxQueryOperationOneOf2 = nil
		} else {
			if err = validator.Validate(dst.MailboxQueryOperationOneOf2); err != nil {
				dst.MailboxQueryOperationOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MailboxQueryOperationOneOf2 = nil
	}

	// try to unmarshal data into MailboxQueryOperationOneOf3
	err = newStrictDecoder(data).Decode(&dst.MailboxQueryOperationOneOf3)
	if err == nil {
		jsonMailboxQueryOperationOneOf3, _ := json.Marshal(dst.MailboxQueryOperationOneOf3)
		if string(jsonMailboxQueryOperationOneOf3) == "{}" { // empty struct
			dst.MailboxQueryOperationOneOf3 = nil
		} else {
			if err = validator.Validate(dst.MailboxQueryOperationOneOf3); err != nil {
				dst.MailboxQueryOperationOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MailboxQueryOperationOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MailboxQueryOperationOneOf = nil
		dst.MailboxQueryOperationOneOf1 = nil
		dst.MailboxQueryOperationOneOf2 = nil
		dst.MailboxQueryOperationOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MailboxQueryOperation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MailboxQueryOperation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MailboxQueryOperation) MarshalJSON() ([]byte, error) {
	if src.MailboxQueryOperationOneOf != nil {
		return json.Marshal(&src.MailboxQueryOperationOneOf)
	}

	if src.MailboxQueryOperationOneOf1 != nil {
		return json.Marshal(&src.MailboxQueryOperationOneOf1)
	}

	if src.MailboxQueryOperationOneOf2 != nil {
		return json.Marshal(&src.MailboxQueryOperationOneOf2)
	}

	if src.MailboxQueryOperationOneOf3 != nil {
		return json.Marshal(&src.MailboxQueryOperationOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MailboxQueryOperation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MailboxQueryOperationOneOf != nil {
		return obj.MailboxQueryOperationOneOf
	}

	if obj.MailboxQueryOperationOneOf1 != nil {
		return obj.MailboxQueryOperationOneOf1
	}

	if obj.MailboxQueryOperationOneOf2 != nil {
		return obj.MailboxQueryOperationOneOf2
	}

	if obj.MailboxQueryOperationOneOf3 != nil {
		return obj.MailboxQueryOperationOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MailboxQueryOperation) GetActualInstanceValue() (interface{}) {
	if obj.MailboxQueryOperationOneOf != nil {
		return *obj.MailboxQueryOperationOneOf
	}

	if obj.MailboxQueryOperationOneOf1 != nil {
		return *obj.MailboxQueryOperationOneOf1
	}

	if obj.MailboxQueryOperationOneOf2 != nil {
		return *obj.MailboxQueryOperationOneOf2
	}

	if obj.MailboxQueryOperationOneOf3 != nil {
		return *obj.MailboxQueryOperationOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableMailboxQueryOperation struct {
	value *MailboxQueryOperation
	isSet bool
}

func (v NullableMailboxQueryOperation) Get() *MailboxQueryOperation {
	return v.value
}

func (v *NullableMailboxQueryOperation) Set(val *MailboxQueryOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableMailboxQueryOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableMailboxQueryOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailboxQueryOperation(val *MailboxQueryOperation) *NullableMailboxQueryOperation {
	return &NullableMailboxQueryOperation{value: val, isSet: true}
}

func (v NullableMailboxQueryOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailboxQueryOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


