/*
DFMailbox API

DFMailbox is a decentralized way to send messages to other DiamondFire plots.

API version: 0.6.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MailboxQueryOperationOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailboxQueryOperationOneOf1{}

// MailboxQueryOperationOneOf1 Imitates DELETE /plot/mailbox
type MailboxQueryOperationOneOf1 struct {
	Type interface{} `json:"type"`
	// A mailbox item id that refers to an item in any mailbox
	After int64 `json:"after"`
}

type _MailboxQueryOperationOneOf1 MailboxQueryOperationOneOf1

// NewMailboxQueryOperationOneOf1 instantiates a new MailboxQueryOperationOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailboxQueryOperationOneOf1(type_ interface{}, after int64) *MailboxQueryOperationOneOf1 {
	this := MailboxQueryOperationOneOf1{}
	this.Type = type_
	this.After = after
	return &this
}

// NewMailboxQueryOperationOneOf1WithDefaults instantiates a new MailboxQueryOperationOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailboxQueryOperationOneOf1WithDefaults() *MailboxQueryOperationOneOf1 {
	this := MailboxQueryOperationOneOf1{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MailboxQueryOperationOneOf1) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailboxQueryOperationOneOf1) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MailboxQueryOperationOneOf1) SetType(v interface{}) {
	o.Type = v
}

// GetAfter returns the After field value
func (o *MailboxQueryOperationOneOf1) GetAfter() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *MailboxQueryOperationOneOf1) GetAfterOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *MailboxQueryOperationOneOf1) SetAfter(v int64) {
	o.After = v
}

func (o MailboxQueryOperationOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailboxQueryOperationOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	toSerialize["after"] = o.After
	return toSerialize, nil
}

func (o *MailboxQueryOperationOneOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"after",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMailboxQueryOperationOneOf1 := _MailboxQueryOperationOneOf1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMailboxQueryOperationOneOf1)

	if err != nil {
		return err
	}

	*o = MailboxQueryOperationOneOf1(varMailboxQueryOperationOneOf1)

	return err
}

type NullableMailboxQueryOperationOneOf1 struct {
	value *MailboxQueryOperationOneOf1
	isSet bool
}

func (v NullableMailboxQueryOperationOneOf1) Get() *MailboxQueryOperationOneOf1 {
	return v.value
}

func (v *NullableMailboxQueryOperationOneOf1) Set(val *MailboxQueryOperationOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMailboxQueryOperationOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMailboxQueryOperationOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailboxQueryOperationOneOf1(val *MailboxQueryOperationOneOf1) *NullableMailboxQueryOperationOneOf1 {
	return &NullableMailboxQueryOperationOneOf1{value: val, isSet: true}
}

func (v NullableMailboxQueryOperationOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailboxQueryOperationOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


